import menus.EditorMenuState;
import helpers.DeepEquals;
import helpers.Cloner;
import newui.TopMenu;
import newui.ColorPicker;
import FileBrowser;

curCharacter = "";
curBox = "";

function create()
{
	state = FlxG.state;
	state.filenameNew = "New Dialogue File";

	var bg = new FlxSprite().makeGraphic(FlxG.width, FlxG.height, FlxColor.GRAY);
	add(bg);

	if (state.isNew)
		dialogueData = {fadeTimes: [0.8, 0.7], lines: [{character: "bf", expression: "normal", text: "", append: false, right: true, bgColor: [255, 255, 255], bgAlpha: 0.5, box: "default", mood: "normal", rate: 0.04, music: ["none", 1, 0]}]};
	else
	{
		var dialogueLines = StringTools.replace(Paths.text(state.id),"\r","").split("\n");

		dialogueData = {fadeTimes: [0.8, 0.7], lines: []};
		var music = ["none", 1, 0];
		var right = true;
		var rate = 0.04;
		var bgColor = [255, 255, 255];
		var bgAlpha = 0.5;
		var box = "default";
		var mood = "normal";
		for (l in dialogueLines)
		{
			var diaSplit = l.split("\t");
			if (l.indexOf("\t") == -1 && l.indexOf("::") > -1)
				diaSplit = l.split("::");
			var curCharacter = diaSplit[0];

			if (curCharacter == "!setting")
			{
				switch (diaSplit[1])
				{
					case "flip": right = !right;
					case "music": music = [diaSplit[2], Std.parseFloat(diaSplit[3]), Std.parseFloat(diaSplit[4])];
					case "bgColor": bgColor = [Std.parseInt(diaSplit[2]), Std.parseInt(diaSplit[3]), Std.parseInt(diaSplit[4])];
					case "bgAlpha": bgAlpha = Std.parseFloat(diaSplit[2]);
					case "fadeTimes": dialogueData.fadeTimes = [Std.parseFloat(diaSplit[2]), Std.parseFloat(diaSplit[3])];
					case "box": box = diaSplit[2];
					case "mood": mood = diaSplit[2];
					case "flip": right = !right;
					case "rate": rate = Std.parseFloat(diaSplit[2]);
				}
			}
			else
			{
				var append = false;
				if (diaSplit.length > 3 && diaSplit[3] == "append")
					append = true;
				dialogueData.lines.push({character: curCharacter, expression: diaSplit[1], text: diaSplit[2], append: append, right: right, bgColor: bgColor.copy(), bgAlpha: bgAlpha, box: box, mood: mood, rate: rate, music: [].concat(music)});
			}
		}
	}
	line = 0;



	box = new DialogueBox("default");
	box.execFunc("enter");
	add(box);

	port = null;

	updateDialogue();



	state.createUI("DialogueEditor");

	currentLine = state.element("currentLine");
	updateLineText();

	var previousLine = state.element("previousLine");
	previousLine.onClicked = function() { changeLine(-1); }

	var nextLine = state.element("nextLine");
	nextLine.onClicked = function() { changeLine(1); }

	var skipAnimation = state.element("skipAnimation");
	skipAnimation.onClicked = function() { box.execFunc("proceed"); }

	var addLine = state.element("addLine");
	addLine.onClicked = function() {
		var newLine = Reflect.copy(dialogueData.lines[line]);
		newLine.music = [].concat(dialogueData.lines[line].music);
		dialogueData.lines.insert(line + 1, newLine);
		changeLine(1);
	}

	var removeLine = state.element("removeLine");
	removeLine.onClicked = function() {
		if (dialogueData.lines.length > 1)
		{
			dialogueData.lines.splice(line, 1);
			if (line > 0)
				changeLine(-1);
			else
				changeLine(0);
		}
	}

	var diaLine = state.element("diaLine");
	diaLine.text = dialogueData.lines[line].text;
	diaLine.condition = function() { return dialogueData.lines[line].text; }
	diaLine.callback = function(text, action) {
		box.execFunc("startText", [text, 0, false]);
		box.execFunc("proceed");
	}
	diaLine.focusLost = function() {
		dialogueData.lines[line].text = diaLine.text;
		updateDialogue();
		box.execFunc("proceed");
	}

	var diaLineAppend = state.element("diaLineAppend");
	diaLineAppend.condition = function() { return dialogueData.lines[line].append; }
	diaLineAppend.onClicked = function() { dialogueData.lines[line].append = diaLineAppend.checked; }

	var bgColor = state.element("bgColor");
	bgColor.onClicked = function() {
		new ColorPicker(FlxColor.fromRGB(dialogueData.lines[line].bgColor[0], dialogueData.lines[line].bgColor[1], dialogueData.lines[line].bgColor[2]), function(clr) {
			dialogueData.lines[line].bgColor = [(clr >> 16) & 0xff, (clr >> 8) & 0xff, clr & 0xff];
		});
	}

	var bgAlpha = state.element("bgAlpha");
	bgAlpha.condition = function() { return dialogueData.lines[line].bgAlpha; }
	bgAlpha.onChanged = function() { dialogueData.lines[line].bgAlpha = bgAlpha.value; }

	var fadeInTime = state.element("fadeInTime");
	fadeInTime.condition = function() { return dialogueData.fadeTimes[0]; }
	fadeInTime.onChanged = function() { dialogueData.fadeTimes[0] = fadeInTime.value; }

	var fadeOutTime = state.element("fadeOutTime");
	fadeOutTime.condition = function() { return dialogueData.fadeTimes[1]; }
	fadeOutTime.onChanged = function() { dialogueData.fadeTimes[1] = fadeOutTime.value; }

	var boxList = Paths.listFilesSub("data/dialogue/boxes/", ".json");
	var boxDropdown = state.element("boxDropdown");
	boxDropdown.valueList = boxList;
	boxDropdown.value = dialogueData.lines[line].box;
	boxDropdown.condition = function() { return dialogueData.lines[line].box; }
	boxDropdown.onChanged = function() {
		dialogueData.lines[line].box = boxDropdown.value;
		updateBox();
	}

	var characterList = Paths.listFilesSub("data/dialogue/portraits/", ".json");
	characterList.unshift("");
	var characterDropdown = state.element("characterDropdown");
	characterDropdown.valueList = characterList;
	characterDropdown.value = dialogueData.lines[line].character;
	characterDropdown.condition = function() { return dialogueData.lines[line].character; }
	characterDropdown.onChanged = function() {
		dialogueData.lines[line].character = characterDropdown.value;
		updatePort();
	}

	expressionDropdown = state.element("expressionDropdown");
	expressionDropdown.value = dialogueData.lines[line].expression;
	expressionDropdown.condition = function() { return dialogueData.lines[line].expression; }
	expressionDropdown.onChanged = function() {
		dialogueData.lines[line].expression = expressionDropdown.value;
		updatePort();
	}

	moodDropdown = state.element("moodDropdown");
	moodDropdown.value = dialogueData.lines[line].mood;
	moodDropdown.condition = function() { return dialogueData.lines[line].mood; }
	moodDropdown.onChanged = function() {
		dialogueData.lines[line].mood = moodDropdown.value;
		updateBox();
	}

	updatePort();
	updateBox();

	var rateStepper = state.element("rateStepper");
	rateStepper.value = dialogueData.lines[line].rate;
	rateStepper.condition = function() { return dialogueData.lines[line].rate; }
	rateStepper.onChanged = function() {
		dialogueData.lines[line].rate = rateStepper.value;
		updateDialogue();
	}

	var sideLeft = state.element("sideLeft");
	sideLeft.condition = function() { return !dialogueData.lines[line].right; }
	sideLeft.onClicked = function() {
		dialogueData.lines[line].right = false;
		updateBox();
		updatePort();
	}

	var sideRight = state.element("sideRight");
	sideRight.condition = function() { return dialogueData.lines[line].right; }
	sideRight.onClicked = function() {
		dialogueData.lines[line].right = true;
		updateBox();
		updatePort();
	}

	var musicList = Paths.listFilesSub("music/", ".ogg");
	musicList.unshift("none");
	musicDropdown = state.element("musicDropdown");
	musicDropdown.valueList = musicList;
	musicDropdown.value = dialogueData.lines[line].music[0];
	musicDropdown.condition = function() { return dialogueData.lines[line].music[0]; }
	musicDropdown.onChanged = function() {
		dialogueData.lines[line].music[0] = musicDropdown.value;
	}

	var musicVolumeStepper = state.element("musicVolumeStepper");
	musicVolumeStepper.value = dialogueData.lines[line].music[1];
	musicVolumeStepper.condition = function() { return dialogueData.lines[line].music[1]; }
	musicVolumeStepper.onChanged = function() {
		dialogueData.lines[line].music[1] = musicVolumeStepper.value;
	}

	var musicTimeStepper = state.element("musicTimeStepper");
	musicTimeStepper.value = dialogueData.lines[line].music[2];
	musicTimeStepper.condition = function() { return dialogueData.lines[line].music[2]; }
	musicTimeStepper.onChanged = function() {
		dialogueData.lines[line].music[2] = musicTimeStepper.value;
	}



	var topmenu;
	topmenu = new TopMenu([
		{
			label: "File",
			options: [
				{
					label: "New",
					action: function() { state._confirm("make a new dialogue file", _new); },
					shortcut: [FlxKey.CONTROL, FlxKey.N],
					icon: "new"
				},
				{
					label: "Open",
					action: function() { state._confirm("load another dialogue file", _open); },
					shortcut: [FlxKey.CONTROL, FlxKey.O],
					icon: "open"
				},
				{
					label: "Save",
					action: function() { _save(false); },
					shortcut: [FlxKey.CONTROL, FlxKey.S],
					icon: "save"
				},
				{
					label: "Save As...",
					action: function() { _save(true); },
					shortcut: [FlxKey.CONTROL, FlxKey.SHIFT, FlxKey.S],
					icon: "save"
				},
				null,
				{
					label: "Exit",
					action: function() { state._confirm("exit", function() { FlxG.switchState(new EditorMenuState()); }); },
					shortcut: [FlxKey.ESCAPE]
				}
			]
		},
		{
			label: "Edit",
			options: [
				{
					label: "Undo",
					action: undo,
					shortcut: [FlxKey.CONTROL, FlxKey.Z],
					icon: "undo"
				},
				{
					label: "Redo",
					action: redo,
					shortcut: [FlxKey.CONTROL, FlxKey.SHIFT, FlxKey.Z],
					icon: "redo"
				}
			]
		},
		{
			label: "View",
			options: [
				{
					label: "Information Panel",
					condition: function() { return state.members.contains(state.infoBox); },
					action: function() {
						if (state.members.contains(state.infoBox))
							remove(state.infoBox, true);
						else
							insert(state.members.indexOf(topmenu), state.infoBox);
					},
					icon: "bullet"
				}
			]
		}
	]);
	topmenu.cameras = [state.camHUD];
	add(topmenu);

	dataLog = [Cloner.clone(dialogueData)];
}

function update(elapsed)
{
	if (!DeepEquals.deepEquals(dialogueData, dataLog[state.undoPosition]))
	{
		if (state.undoPosition < dataLog.length - 1)
			dataLog.resize(state.undoPosition + 1);
		dataLog.push(Cloner.clone(dialogueData));
		state.unsaved = true;
		state.undoPosition = dataLog.length - 1;
		state.refreshFilename();
	}
}

function updateLineText()
{
	currentLine.text = Std.string(line + 1) + "/" + Std.string(dialogueData.lines.length);
}

function updateDialogue()
{
	box.execFunc("startText", [dialogueData.lines[line].text, dialogueData.lines[line].rate, false]);
}

function updatePort()
{
	if (curCharacter != dialogueData.lines[line].character)
	{
		if (port != null)
		{
			remove(port);
			port.destroy();
		}
		if (dialogueData.lines[line].character == "")
			port = null;
		else
		{
			port = new DialoguePort(dialogueData.lines[line].character);
			insert(state.members.indexOf(box), port);
			FlxTween.completeTweensOf(port);
		}

		curCharacter = dialogueData.lines[line].character;
		if (curCharacter == "")
		{
			expressionDropdown.valueList = [""];
			dialogueData.lines[line].expression = "";
		}
		else
		{
			var data = port.getVar("data");

			var expList = [];
			for (e in data.expressions)
				expList.push(e.name);

			expressionDropdown.valueList = expList;
			if (!expList.contains(dialogueData.lines[line].expression))
				dialogueData.lines[line].expression = expList[0];
		}
	}

	if (port != null)
	{
		port.execFunc("setExpression", [dialogueData.lines[line].expression]);
		port.execFunc("enter", [dialogueData.lines[line].right]);
		FlxTween.completeTweensOf(port);
		port.execFunc("playIdle");
	}
}

function updateBox()
{
	if (curBox != dialogueData.lines[line].box)
	{
		if (box != null)
		{
			remove(box);
			box.destroy();
		}
		box = new DialogueBox(dialogueData.lines[line].box);
		box.execFunc("enter");
		add(box);
		curBox = dialogueData.lines[line].box;
		var data = box.getVar("data");

		var moodList = [];
		for (m in data.moods)
			moodList.push(m.name);

		moodDropdown.valueList = moodList;
		if (!moodList.contains(dialogueData.lines[line].mood))
			dialogueData.lines[line].mood = moodList[0];

		updateDialogue();
	}

	if (box.getVar("box").flipX == dialogueData.lines[line].right)
		box.execFunc("flip");
	box.execFunc("setMood", [dialogueData.lines[line].mood]);
	box.execFunc("playIdle");
}

function changeLine(direction)
{
	line += direction;
	if (line < 0)
		line = dialogueData.lines.length - 1;
	if (line >= dialogueData.lines.length)
		line = 0;

	updateLineText();
	updateDialogue();
	updateBox();
	updatePort();
}



function undo()
{
	if (state.undoPosition > 0)
	{
		state.undoPosition--;
		if (!state.unsaved)
		{
			state.unsaved = true;
			state.refreshFilename();
		}
		dialogueData = Cloner.clone(dataLog[state.undoPosition]);
		postUndoRedo();
	}
}

function redo()
{
	if (state.undoPosition < dataLog.length - 1)
	{
		state.undoPosition++;
		if (!state.unsaved)
		{
			state.unsaved = true;
			state.refreshFilename();
		}
		dialogueData = Cloner.clone(dataLog[state.undoPosition]);
		postUndoRedo();
	}
}

function postUndoRedo()
{
	if (line > dialogueData.lines.length - 1)
		line = dialogueData.lines.length - 1;
	updateLineText();
	updateDialogue();
	updateBox();
	updatePort();
}



function _new()
{
	FlxG.switchState(new HscriptEditorState(true, "", ""));
}

function _save(browse)
{
	var data = [];

	if (!DeepEquals.deepEquals(dialogueData.fadeTimes, [0.8, 0.7]))
		data.push("!setting	fadeTimes\t" + Std.string(dialogueData.fadeTimes[0]) + "\t" + Std.string(dialogueData.fadeTimes[1]));

	var music = "none";
	var right = true;
	var rate = 0.04;
	var bgColor = [255, 255, 255];
	var bgAlpha = 0.5;
	var box = "default";
	var mood = "normal";
	for (l in dialogueData.lines)
	{
		if (l.music[0] != music)
		{
			data.push("!setting\tmusic\t" + l.music[0] + "\t" + Std.string(l.music[1]) + "\t" + Std.string(l.music[2]));
			music = l.music[0];
		}

		if (!DeepEquals.deepEquals(l.bgColor, bgColor))
		{
			data.push("!setting\tbgColor\t" + Std.string(l.bgColor[0]) + "\t" + Std.string(l.bgColor[1]) + "\t" + Std.string(l.bgColor[2]));
			bgColor = l.bgColor.copy();
		}

		if (l.bgAlpha != bgAlpha)
		{
			data.push("!setting\tbgAlpha\t" + Std.string(l.bgAlpha));
			bgAlpha = l.bgAlpha;
		}

		if (l.box != box)
		{
			data.push("!setting\tbox\t" + l.box);
			box = l.box;
		}

		if (l.mood != mood)
		{
			data.push("!setting\tmood\t" + l.mood);
			mood = l.mood;
		}

		if (l.rate != rate)
		{
			data.push("!setting\trate\t" + Std.string(l.rate));
			rate = l.rate;
		}

		if (l.right != right)
		{
			data.push("!setting\tflip");
			right = l.right;
		}

		if (l.append)
			data.push(l.character + "\t" + l.expression + "\t" + l.text + "\tappend");
		else
			data.push(l.character + "\t" + l.expression + "\t" + l.text);
	}

	if (browse || state.filename == "")
	{
		var file = new FileBrowser();
		file.saveCallback = state.changeSaveName;
		file.save("dialogue.txt", data.join("\n"));
	}
	else
	{
		FileBrowser.saveAs(state.filename, data.join("\n"));
		state.unsaved = false;
		state.refreshFilename();
	}
}

function _open()
{
	var file = new FileBrowser();
	file.loadCallback = function(fullPath) {
		var dialogueArray = StringTools.replace(fullPath,'\\','/').split('/');
		while (dialogueArray[0] != "data")
			dialogueArray.shift();
		dialogueArray.shift();

		FlxG.switchState(new HscriptEditorState(false, dialogueArray.join("/").split('.txt')[0], fullPath));
	}
	file.load("txt", "txt");
}