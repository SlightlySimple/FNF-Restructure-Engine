import menus.EditorMenuState;
import FileBrowser;
import lime.app.Application;
import funkui.IsolatedTabMenu;
import funkui.TabGroup;
import funkui.Checkbox;
import funkui.DropdownMenu;
import funkui.InputText;
import funkui.Label;
import funkui.Stepper;
import funkui.TextButton;

movingCharacter = false;
movingAnimOffset = false;
curAnim = 0;

function create()
{
	var state = FlxG.state;
	var bg = new FlxSprite().makeGraphic(FlxG.width, FlxG.height, FlxColor.GRAY);
	state.add(bg);

	data = {asset: "Boyfriend", position: [0, 0], scale: [1, 1], flip: false, animations: []};

	portrait = new AnimatedSprite();
	state.add(portrait);

	infoText = new FlxText(30, 30, 0, "", 24);
	infoText.font = "VCR OSD Mono";
	infoText.borderColor = FlxColor.BLACK;
	infoText.borderStyle = OUTLINE;
	state.add(infoText);
	updateInfoText();

	box = CreateSprite("ui/speech_bubble_talking", 60, 350);
	box.addAnim("normal", "speech bubble normal0", 24);
	box.playAnim("normal");
	box.flipX = true;
	state.add(box);

	refresh();



	tabMenu = new IsolatedTabMenu(FlxG.width - 300, 50, 250, 560);
	state.add(tabMenu);

	var tabGroup = new TabGroup();

	var saveButton = new TextButton(10, 10, 115, 20, "Save");
	saveButton.onClicked = save;
	tabGroup.add(saveButton);

	var loadButton = new TextButton(saveButton.x + 115, saveButton.y, 115, 20, "Load");
	loadButton.onClicked = load;
	tabGroup.add(loadButton);

	var loadAssetButton = new TextButton(10, saveButton.y + 30, 230, 20, "Change Asset");
	loadAssetButton.onClicked = loadAsset;
	tabGroup.add(loadAssetButton);

	showBox = new Checkbox(10, loadAssetButton.y + 30, 20, 20, "Show Dialogue Box");
	showBox.checked = true;
	showBox.onClicked = function() { box.visible = showBox.checked; }
	tabGroup.add(showBox);

	flipCheckbox = new Checkbox(10, showBox.y + 30, 20, 20, "Flip");
	flipCheckbox.checked = data.flip;
	flipCheckbox.onClicked = function() { data.flip = flipCheckbox.checked; portrait.flipX = data.flip; }
	tabGroup.add(flipCheckbox);

	scaleStepperX = new Stepper(10, flipCheckbox.y + 40, 115, 20, data.scale[0], 0.05, 0, 9999, 3);
	scaleStepperX.onChanged = function() { data.scale[0] = scaleStepperX.value; portrait.scale.x = data.scale[0]; }
	tabGroup.add(scaleStepperX);
	scaleStepperY = new Stepper(scaleStepperX.x + 115, scaleStepperX.y, 115, 20, data.scale[1], 0.05, 0, 9999, 3);
	scaleStepperY.onChanged = function() { data.scale[1] = scaleStepperY.value; portrait.scale.y = data.scale[1]; }
	tabGroup.add(scaleStepperY);
	tabGroup.add(new Label("Scale:", scaleStepperX));

	animName = new InputText(10, scaleStepperX.y + 60);
	tabGroup.add(animName);
	tabGroup.add(new Label("Animation Name:", animName));

	idlePrefix = new DropdownMenu(10, animName.y + 40, 230, 20, prefixArray[0], prefixArray);
	tabGroup.add(idlePrefix);
	tabGroup.add(new Label("Idle Prefix:", idlePrefix));

	idleLoop = new Checkbox(10, idlePrefix.y + 40, 20, 20, "Loop");
	idleLoop.checked = true;
	tabGroup.add(idleLoop);

	idleFPS = new Stepper(idleLoop.x + 115, idleLoop.y, 115, 20, 24, 1, 0);
	tabGroup.add(idleFPS);
	tabGroup.add(new Label("FPS:", idleFPS));

	talkPrefix = new DropdownMenu(10, idleFPS.y + 40, 230, 20, prefixArray2[0], prefixArray2);
	tabGroup.add(talkPrefix);
	tabGroup.add(new Label("Talk Prefix (Optional):", talkPrefix));

	talkLoop = new Checkbox(10, talkPrefix.y + 40, 20, 20, "Loop");
	talkLoop.checked = true;
	tabGroup.add(talkLoop);

	talkFPS = new Stepper(talkLoop.x + 115, talkLoop.y, 115, 20, 24, 1, 0);
	tabGroup.add(talkFPS);
	tabGroup.add(new Label("FPS:", talkFPS));

	var addAnimButton = new TextButton(10, talkFPS.y + 30, 230, 20, "Add/Update Animation");
	addAnimButton.onClicked = function() {
		if (animName.text != "")
		{
			var newAnim = { name: animName.text, idle: { prefix: idlePrefix.value, fps: Std.int(idleFPS.value), loop: idleLoop.checked, offsets: [0, 0] } };
			if (talkPrefix.value != "")
				newAnim.talk = { prefix: talkPrefix.value, fps: Std.int(talkFPS.value), loop: talkLoop.checked, offsets: [0, 0] };

			var match = -1;
			for (i in 0...data.animations.length)
			{
				if (data.animations[i].name == newAnim.name)
					match = i;
			}

			if (match > -1)
			{
				data.animations[match] = newAnim;
				curAnim = match;
			}
			else
			{
				data.animations.push(newAnim);
				curAnim = data.animations.length - 1;
			}

			portrait.addAnim(newAnim.name + "Idle", newAnim.idle.prefix, newAnim.idle.fps, newAnim.idle.loop);
			portrait.addOffsets(newAnim.name + "Idle", newAnim.idle.offsets);
			if (Reflect.hasField(newAnim, "talk"))
			{
				portrait.addAnim(newAnim.name + "Talk", newAnim.talk.prefix, newAnim.talk.fps, newAnim.talk.loop);
				portrait.addOffsets(newAnim.name + "Talk", newAnim.talk.offsets);
			}
			portrait.playAnim(data.animations[curAnim].name + "Idle");
			refreshMenus();
		}
	}
	tabGroup.add(addAnimButton);

	var playIdleButton = new TextButton(10, addAnimButton.y + 30, 115, 20, "Play Idle");
	playIdleButton.onClicked = function() {
		if (data.animations.length > 0)
			portrait.playAnim(data.animations[curAnim].name + "Idle");
	}
	tabGroup.add(playIdleButton);

	var playTalkButton = new TextButton(playIdleButton.x + 115, playIdleButton.y, 115, 20, "Play Talk");
	playTalkButton.onClicked = function() {
		if (data.animations.length > 0)
			portrait.playAnim(data.animations[curAnim].name + "Talk");
	}
	tabGroup.add(playTalkButton);

	var removeAnimButton = new TextButton(10, playIdleButton.y + 30, 230, 20, "Remove Animation");
	removeAnimButton.onClicked = function() {
		if (data.animations.length > 0)
		{
			data.animations.splice(curAnim, 1);
			if (data.animations.length > 0)
			{
				if (curAnim >= data.animations.length)
					curAnim--;

				portrait.playAnim(data.animations[curAnim].name + "Idle");
			}
			refreshMenus();
		}
	}
	tabGroup.add(removeAnimButton);

	tabMenu.addGroup(tabGroup);
}

function update(elapsed)
{
	if (movingCharacter)
	{
		if (movingAnimOffset)
		{
			if (portrait.animation.curAnim.name == data.animations[curAnim].name + "Talk")
			{
				data.animations[curAnim].talk.offsets[0] -= Std.int(FlxG.mouse.drag.x);
				data.animations[curAnim].talk.offsets[1] -= Std.int(FlxG.mouse.drag.y);
				portrait.addOffsets(data.animations[curAnim].name + "Talk", data.animations[curAnim].talk.offsets);
				portrait.playAnim(data.animations[curAnim].name + "Talk", true);
			}
			else
			{
				data.animations[curAnim].idle.offsets[0] -= Std.int(FlxG.mouse.drag.x);
				data.animations[curAnim].idle.offsets[1] -= Std.int(FlxG.mouse.drag.y);
				portrait.addOffsets(data.animations[curAnim].name + "Idle", data.animations[curAnim].idle.offsets);
				portrait.playAnim(data.animations[curAnim].name + "Idle", true);
			}
		}
		else
		{
			data.position[0] += FlxG.mouse.drag.x;
			data.position[1] += FlxG.mouse.drag.y;
			portrait.x = data.position[0];
			portrait.y = data.position[1];
		}
		updateInfoText();

		if (FlxG.mouse.justReleased)
			movingCharacter = false;
	}
	else
	{
		if (FlxG.mouse.justPressed)
		{
			if (!FlxG.mouse.overlaps(tabMenu))
			{
				movingAnimOffset = FlxG.keys.pressed.SHIFT;
				if (data.animations.length <= 0)
					movingAnimOffset = false;

				movingCharacter = true;
			}
		}
	}

	if (FlxG.keys.justPressed.LEFT)
		doMovement(-1, 0);

	if (FlxG.keys.justPressed.RIGHT)
		doMovement(1, 0);

	if (FlxG.keys.justPressed.UP)
		doMovement(0, -1);

	if (FlxG.keys.justPressed.DOWN)
		doMovement(0, 1);

	if (data.animations.length > 0 && FlxG.mouse.wheel != 0)
	{
		curAnim -= FlxG.mouse.wheel;
		if (curAnim >= data.animations.length)
			curAnim = 0;
		if (curAnim < 0)
			curAnim = data.animations.length - 1;

		portrait.playAnim(data.animations[curAnim].name + "Idle");
		refreshMenus();
	}

	if (FlxG.keys.justPressed.ESCAPE)
		FlxG.switchState(new EditorMenuState());
}

function doMovement(x, y)
{
	data.position[0] += x;
	data.position[1] += y;
	portrait.x = data.position[0];
	portrait.y = data.position[1];
	updateInfoText();
}

function refresh()
{
	portrait.frames = Paths.sparrow("portraits/" + data.asset);
	prefixArray = Paths.sparrowAnimations("portraits/" + data.asset);
	prefixArray2 = [""].concat(prefixArray);
	portrait.x = data.position[0];
	portrait.y = data.position[1];
	portrait.flipX = data.flip;
	portrait.scale.x = data.scale[0];
	portrait.scale.y = data.scale[1];

	for (a in data.animations)
	{
		portrait.addAnim(a.name + "Idle", a.idle.prefix, a.idle.fps, a.idle.loop);
		portrait.addOffsets(a.name + "Idle", a.idle.offsets);
		if (Reflect.hasField(a, "talk"))
		{
			portrait.addAnim(a.name + "Talk", a.talk.prefix, a.talk.fps, a.talk.loop);
			portrait.addOffsets(a.name + "Talk", a.talk.offsets);
		}
	}

	if (data.animations.length > 0)
		portrait.playAnim(data.animations[curAnim].name + "Idle");
}

function refreshMenus()
{
	updateInfoText();
	flipCheckbox.checked = data.flip;
	scaleStepperX.value = data.scale[0];
	scaleStepperY.value = data.scale[1];
	if (data.animations.length > 0)
	{
		animName.text = data.animations[curAnim].name;
		idlePrefix.value = data.animations[curAnim].idle.prefix;
		idleLoop.checked = data.animations[curAnim].idle.loop;
		idleFPS.value = data.animations[curAnim].idle.fps;
		if (Reflect.hasField(data.animations[curAnim], "talk"))
		{
			talkPrefix.value = data.animations[curAnim].talk.prefix;
			talkLoop.checked = data.animations[curAnim].talk.loop;
			talkFPS.value = data.animations[curAnim].talk.fps;
		}
		else
		{
			talkPrefix.value = "";
			talkLoop.checked = data.animations[curAnim].idle.loop;
			talkFPS.value = data.animations[curAnim].idle.fps;
		}
	}
}

function updateInfoText()
{
	infoText.text = "Position: " + Std.string(data.position) + "\nClick and drag to adjust\nUse the arrow keys to precisely adjust";
	if (data.animations.length > 0)
	{
		infoText.text += "\n\nUse the scroll wheel to cycle through animations\nShift+Click and drag to adjust current animation offsets\n\n";
		for (i in 0...data.animations.length)
		{
			if (i == curAnim)
				infoText.text += "> ";
			infoText.text += data.animations[i].name + " " + Std.string(data.animations[i].idle.offsets);
			if (Reflect.hasField(data.animations[i].talk))
				infoText.text += " " + Std.string(data.animations[i].talk.offsets);
			infoText.text += "\n";
		}
	}
}



function save()
{
	var saveData = Json.stringify(data, null, "\t");
	if (Options.options.compactJsons)
		saveData = Json.stringify(data);

	if ((saveData != null) && (saveData.length > 0))
	{
		var file = new FileBrowser();
		file.save(data.asset.toLowerCase() + ".json", StringTools.trim(saveData));
	}
}

function load()
{
	var file = new FileBrowser();
	file.loadCallback = function(fullPath) {
		var fileArray = StringTools.replace(fullPath,'\\','/').split('/');
		while (fileArray[0] != "data")
			fileArray.remove(fileArray[0]);
		fileArray.remove(fileArray[0]);

		var portraitFile = fileArray.join("/").split('.json')[0];
		data = Paths.json(portraitFile);
		curAnim = 0;
		refresh();
		idlePrefix.valueList = prefixArray;
		talkPrefix.valueList = prefixArray2;
		refreshMenus();
	}
	file.load("JSON", "json");
}

function loadAsset()
{
	var file = new FileBrowser();
	file.loadCallback = function(fullPath) {
		var fileArray = StringTools.replace(fullPath,'\\','/').split('/');
		if (fileArray.contains("portraits"))
		{
			while (fileArray[0] != "portraits")
				fileArray.remove(fileArray[0]);
			fileArray.remove(fileArray[0]);

			var portraitAsset = fileArray.join("/").split('.png')[0];
			if (Paths.imageExists("portraits/" + portraitAsset))
			{
				data.asset = portraitAsset;
				refresh();
				idlePrefix.valueList = prefixArray;
				talkPrefix.valueList = prefixArray2;
				refreshMenus();
			}
			else
				Application.current.window.alert("The file you have selected can not be found. It is likely in the wrong location.", "Alert");
		}
		else
			Application.current.window.alert("The file you have selected is not a portrait asset.", "Alert");
	}
	file.load("PNG", "png");
}