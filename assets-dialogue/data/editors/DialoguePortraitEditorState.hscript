import menus.EditorMenuState;
import helpers.DeepEquals;
import helpers.Cloner;
import newui.UIControl;
import newui.TopMenu;
import newui.ObjectMenu;
import newui.EasePicker;
import newui.Notify;
import FileBrowser;
import openfl.ui.Mouse;

movingCharacter = false;
movingAnimOffset = false;
curAnim = -1;

function create()
{
	state = FlxG.state;
	state.filenameNew = "New Dialogue Portrait";
	mousePos = FlxPoint.get();

	var bg = new FlxSprite().makeGraphic(FlxG.width, FlxG.height, FlxColor.GRAY);
	add(bg);

	if (state.isNew)
		data = {asset: "dialogue/portraits/Boyfriend", position: [0, 0], scale: [1, 1], antialias: true, flip: false, expressions: [], animations: [], transitions: {enter: {x: -400, y: 0, alpha: 0, ease: "sineOut", time: 0.3}, exit: {x: -400, y: 0, alpha: 0, ease: "sineIn", time: 0.3}}};
	else
		data = Paths.json(state.id);
	if (data.animations.length > 0)
	{
		curAnim = 0;
		if (data.animations[0].prefix == null)
		{
			data.expressions = [];
			newAnimations = [];
			for (a in data.animations)
			{
				newExpression = {name: a.name};
				if (a.idle != null)
				{
					newAnimations.push({name: a.name + "Idle", prefix: a.idle.prefix, offsets: a.idle.offsets, fps: a.idle.fps, loop: a.idle.loop});
					newExpression.idle = a.name + "Idle";
				}
				if (a.talk != null)
				{
					newAnimations.push({name: a.name + "Talk", prefix: a.talk.prefix, offsets: a.talk.offsets, fps: a.talk.fps, loop: a.talk.loop});
					newExpression.talk = a.name + "Talk";
				}
				data.expressions.push(newExpression);
			}
			data.animations = newAnimations;
		}
	}
	if (data.antialias == null)
		data.antialias = true;
	if (data.transitions == null)
		data.transitions = {enter: {x: -400, y: 0, alpha: 0, ease: "sineOut", time: 0.3}, exit: {x: -400, y: 0, alpha: 0, ease: "sineIn", time: 0.3}};

	if (!Paths.imageExists(data.asset) && Paths.imageExists("dialogue/portraits/" + data.asset))
		data.asset = "dialogue/portraits/" + data.asset;



	otherGhost = new DialoguePort("bf");
	otherGhost.alpha = 0.5;
	otherGhost.visible = false;
	add(otherGhost);

	portrait = new AnimatedSprite();
	add(portrait);

	box = new DialogueBox("default");
	box.execFunc("flip");
	add(box);

	refresh();



	charAnims = new ObjectMenu(990, 250, "animationBox");
	charAnims.selected = curAnim;
	charAnims.onClicked = function(index) {
		curAnim = index;
		portrait.playAnim(data.animations[curAnim].name);
		refreshMenus();
		refreshCharAnims();
	}
	charAnims.cameras = [state.camHUD];
	add(charAnims);
	refreshCharAnims();



	state.createUI("DialoguePortraitEditor");
	tabMenu = state.tabMenu;
	infoBox = state.infoBox;

	var characterAsset = state.element("characterAsset");
	characterAsset.text = data.asset;
	characterAsset.condition = function() { return data.asset; }
	characterAsset.focusLost = function() {
		if (!changeAsset(characterAsset.text))
			characterAsset.text = data.asset;
	}

	var loadAssetButton = state.element("loadAssetButton");
	loadAssetButton.onClicked = loadAsset;

	var charX = state.element("charX");
	charX.value = data.position[0];
	charX.condition = function() { return data.position[0]; }
	charX.onChanged = function() { data.position[0] = charX.value; portrait.x = data.position[0]; }

	var charY = state.element("charY");
	charY.value = data.position[1];
	charY.condition = function() { return data.position[1]; }
	charY.onChanged = function() { data.position[1] = charY.value; portrait.y = data.position[1]; }

	scaleStepperX = state.element("scaleStepperX");
	scaleStepperX.value = data.scale[0];
	scaleStepperX.condition = function() { data.scale[0]; }
	scaleStepperX.onChanged = function() { data.scale[0] = scaleStepperX.value; portrait.scale.x = data.scale[0]; refreshScale(); }

	var scaleStepperY = state.element("scaleStepperY");
	scaleStepperY.value = data.scale[1];
	scaleStepperY.condition = function() { data.scale[1]; }
	scaleStepperY.onChanged = function() { data.scale[1] = scaleStepperY.value; portrait.scale.y = data.scale[1]; refreshScale(); }

	var antialiasCheckbox = state.element("antialiasCheckbox");
	antialiasCheckbox.checked = data.antialias;
	antialiasCheckbox.condition = function() { return data.antialias; }
	antialiasCheckbox.onClicked = function() { data.antialias = antialiasCheckbox.checked; portrait.antialiasing = data.antialias; }

	var flipCheckbox = state.element("flipCheckbox");
	flipCheckbox.checked = data.flip;
	flipCheckbox.condition = function() { return data.flip; }
	flipCheckbox.onClicked = function() { data.flip = flipCheckbox.checked; portrait.flipX = data.flip; }



	var boxList = Paths.listFilesSub("data/dialogue/boxes/", ".json");
	var boxType = state.element("boxType");
	boxType.valueList = boxList;
	boxType.value = "default";
	boxType.onChanged = function() {
		remove(box, true);
		box = new DialogueBox(boxType.value);
		box.execFunc("flip");
		box.execFunc("enter");
		add(box);
	}

	var showOtherAnimGhost = state.element("showOtherAnimGhost");
	showOtherAnimGhost.onClicked = function() { otherGhost.visible = showOtherAnimGhost.checked; }

	var otherGhostAlpha = state.element("otherGhostAlpha");
	otherGhostAlpha.value = otherGhost.alpha;
	otherGhostAlpha.onChanged = function() { otherGhost.alpha = otherGhostAlpha.value; }

	var otherGhostAnimDropdown = state.element("otherGhostAnimDropdown");
	var animList = [];
	for (a in otherGhost.getVar("data").animations)
		animList.push(a.name);
	otherGhostAnimDropdown.valueList = animList;
	otherGhostAnimDropdown.value = otherGhost.animation.curAnim.name;
	otherGhostAnimDropdown.onChanged = function() { otherGhost.playAnim(otherGhostAnimDropdown.value); }

	var portList = Paths.listFilesSub("data/dialogue/portraits/", ".json");
	var otherGhostDropdown = state.element("otherGhostDropdown");
	otherGhostDropdown.valueList = portList;
	otherGhostDropdown.value = "bf";
	otherGhostDropdown.onChanged = function() {
		var newGhost = new DialoguePort(otherGhostDropdown.value);
		newGhost.alpha = otherGhost.alpha;
		newGhost.visible = otherGhost.visible;
		insert(state.members.indexOf(otherGhost), newGhost);
		remove(otherGhost, true);
		otherGhost = newGhost;

		var animList = [];
		for (a in otherGhost.getVar("data").animations)
			animList.push(a.name);
		otherGhostAnimDropdown.valueList = animList;
		otherGhostAnimDropdown.value = otherGhost.animation.curAnim.name;
	}



	expressionDropdown = state.element("expressionDropdown");
	expressionDropdown.onChanged = function() {
		var curExpression = null;
		for (e in data.expressions)
		{
			if (e.name == expressionDropdown.value)
				curExpression = e;
		}
		if (curExpression != null)
		{
			expressionName.text = curExpression.name;
			if (curExpression.enter == null)
				expressionEnterAnim.value = "";
			else
				expressionEnterAnim.value = curExpression.enter;
			if (curExpression.talk == null)
				expressionTalkAnim.value = "";
			else
				expressionTalkAnim.value = curExpression.talk;
			expressionIdleAnim.value = curExpression.idle;
		}
	}

	expressionName = state.element("expressionName");
	expressionEnterAnim = state.element("expressionEnterAnim");
	expressionTalkAnim = state.element("expressionTalkAnim");
	expressionIdleAnim = state.element("expressionIdleAnim");

	var addExpressionButton = state.element("addExpressionButton");
	addExpressionButton.onClicked = function() {
		if (expressionName != "" && expressionIdleAnim.value != "")
		{
			var newExpression = { name: expressionName.text, idle: expressionIdleAnim.value };
			if (expressionTalkAnim.value != "")
				newExpression.talk = expressionTalkAnim.value;
			if (expressionEnterAnim.value != "")
				newExpression.enter = expressionEnterAnim.value;

			var match = -1;
			for (i in 0...data.expressions.length)
			{
				if (data.expressions[i].name == newExpression.name)
					match = i;
			}

			if (match > -1)
				data.expressions[match] = newExpression;
			else
				data.expressions.push(newExpression);
			refreshMenus();
		}
	}

	var removeExpressionButton = state.element("removeExpressionButton");
	removeExpressionButton.onClicked = function() {
		if (expressionDropdown.value != "")
		{
			var match = -1;
			for (i in 0...data.expressions.length)
			{
				if (data.expressions[i].name == expressionDropdown.value)
					match = i;
			}

			if (match > -1)
				data.expressions.splice(match, 1);
			refreshMenus();
		}
	}



	animName = state.element("animName");

	idlePrefix = state.element("idlePrefix");
	idlePrefix.valueList = prefixArray;
	idlePrefix.value = prefixArray[0];

	animIndices = state.element("animIndices");

	var allIndices = state.element("allIndices");
	allIndices.onClicked = function()
	{
		if (idlePrefix.value != "" && allAnimData.indexOf(idlePrefix.value) != -1)
		{
			var len:Int = allAnimData.split(idlePrefix.value).length - 1;
			animIndices.text = "";
			for (i in 0...len)
			{
				animIndices.text += Std.string(i);
				if (i < len - 1)
					animIndices.text += ",";
			}
		}
	}

	idleOffsetX = state.element("idleOffsetX");
	idleOffsetX.condition = function() {
		if (data.animations.length > 0)
			return data.animations[curAnim].offsets[0];
		return idleOffsetX.value;
	}
	idleOffsetX.onChanged = function() {
		if (data.animations.length > 0)
		{
			data.animations[curAnim].offsets[0] = idleOffsetX.value;
			refreshCharAnims();
			portrait.addOffsets(data.animations[curAnim].name, [data.animations[curAnim].offsets[0], data.animations[curAnim].offsets[1]]);
			portrait.updateOffsets();
		}
	}

	idleOffsetY = state.element("idleOffsetY");
	idleOffsetY.condition = function() {
		if (data.animations.length > 0)
			return data.animations[curAnim].offsets[1];
		return idleOffsetY.value;
	}
	idleOffsetY.onChanged = function() {
		if (data.animations.length > 0)
		{
			data.animations[curAnim].offsets[1] = idleOffsetY.value;
			refreshCharAnims();
			portrait.addOffsets(data.animations[curAnim].name, [data.animations[curAnim].offsets[0], data.animations[curAnim].offsets[1]]);
			portrait.updateOffsets();
		}
	}

	idleLoop = state.element("idleLoop");
	idleLoop.checked = true;
	idleLoop.condition = function() {
		if (data.animations.length > 0)
			return data.animations[curAnim].loop;
		return idleLoop.checked;
	}
	idleLoop.onClicked = function() {
		if (data.animations.length > 0)
		{
			data.animations[curAnim].loop = idleLoop.checked;
			portrait.addAnim(data.animations[curAnim].name, data.animations[curAnim].prefix, data.animations[curAnim].fps, data.animations[curAnim].loop, data.animations[curAnim].indices);
			if (portrait.animation.curAnim.name == data.animations[curAnim].name)
				portrait.playAnim(portrait.animation.curAnim.name);
		}
	}

	idleFPS = state.element("idleFPS");
	idleFPS.condition = function() {
		if (data.animations.length > 0)
			return data.animations[curAnim].fps;
		return idleFPS.value;
	}
	idleFPS.onChanged = function() {
		if (data.animations.length > 0)
		{
			data.animations[curAnim].fps = idleFPS.value;
			portrait.addAnim(data.animations[curAnim].name, data.animations[curAnim].prefix, data.animations[curAnim].fps, data.animations[curAnim].loop, data.animations[curAnim].indices);
			if (portrait.animation.curAnim.name == data.animations[curAnim].name)
				portrait.playAnim(portrait.animation.curAnim.name);
		}
	}

	var addAnimButton = state.element("addAnimButton");
	addAnimButton.onClicked = function() {
		if (animName.text != "")
		{
			var newAnim = { name: animName.text, prefix: idlePrefix.value, fps: Std.int(idleFPS.value), loop: idleLoop.checked, offsets: [0, 0] };

			if (animIndices.text != "")
			{
				newAnim.indices = [];
				var indicesSplit = animIndices.text.split(",");
				for (i in indicesSplit)
					newAnim.indices.push(Std.parseInt(i));
			}

			var match = -1;
			for (i in 0...data.animations.length)
			{
				if (data.animations[i].name == newAnim.name)
					match = i;
			}

			if (match > -1)
			{
				data.animations[match] = newAnim;
				curAnim = match;
				charAnims.selected = curAnim;
			}
			else
			{
				data.animations.push(newAnim);
				curAnim = data.animations.length - 1;
				charAnims.selected = curAnim;
			}

			portrait.addAnim(newAnim.name, newAnim.prefix, newAnim.fps, newAnim.loop, newAnim.indices);
			portrait.addOffsets(newAnim.name, [newAnim.offsets[0], newAnim.offsets[1]]);
			portrait.playAnim(data.animations[curAnim].name);
			refreshCharAnims();
			refreshMenus();
		}
	}

	var removeAnimButton = state.element("removeAnimButton");
	removeAnimButton.onClicked = function() {
		if (data.animations.length > 0)
		{
			data.animations.splice(curAnim, 1);
			if (data.animations.length > 0)
			{
				if (curAnim >= data.animations.length)
					curAnim--;

				portrait.playAnim(data.animations[curAnim].name);
			}
			refreshCharAnims();
			refreshMenus();
		}
	}

	refreshMenus();



	var enterX = state.element("enterX");
	enterX.condition = function() { return data.transitions.enter.x; }
	enterX.onChanged = function() { data.transitions.enter.x = enterX.value; }

	var enterY = state.element("enterY");
	enterY.condition = function() { return data.transitions.enter.y; }
	enterY.onChanged = function() { data.transitions.enter.y = enterY.value; }

	var enterAlpha = state.element("enterAlpha");
	enterAlpha.condition = function() { return data.transitions.enter.alpha; }
	enterAlpha.onChanged = function() { data.transitions.enter.alpha = enterAlpha.value; }

	var enterEase = state.element("enterEase");
	enterEase.onClicked = function() { new EasePicker(data.transitions.enter.ease, function(ease) { data.transitions.enter.ease = ease; }); }

	var enterTime = state.element("enterTime");
	enterTime.condition = function() { return data.transitions.enter.time; }
	enterTime.onChanged = function() { data.transitions.enter.time = enterTime.value; }

	var exitX = state.element("exitX");
	exitX.condition = function() { return data.transitions.exit.x; }
	exitX.onChanged = function() { data.transitions.exit.x = exitX.value; }

	var exitY = state.element("exitY");
	exitY.condition = function() { return data.transitions.exit.y; }
	exitY.onChanged = function() { data.transitions.exit.y = exitY.value; }

	var exitAlpha = state.element("exitAlpha");
	exitAlpha.condition = function() { return data.transitions.exit.alpha; }
	exitAlpha.onChanged = function() { data.transitions.exit.alpha = exitAlpha.value; }

	var exitEase = state.element("exitEase");
	exitEase.onClicked = function() { new EasePicker(data.transitions.exit.ease, function(ease) { data.transitions.exit.ease = ease; }); }

	var exitTime = state.element("exitTime");
	exitTime.condition = function() { return data.transitions.exit.time; }
	exitTime.onChanged = function() { data.transitions.exit.time = exitTime.value; }



	var help = "Left Click + Drag: Move Portrait\nShift-Left Click + Drag: Move Animation Offset\nClick on the animation names in the Animations panel to play the animation";

	var topmenu;
	topmenu = new TopMenu([
		{
			label: "File",
			options: [
				{
					label: "New",
					action: function() { state._confirm("make a new dialogue portrait", _new); },
					shortcut: [FlxKey.CONTROL, FlxKey.N],
					icon: "new"
				},
				{
					label: "Open",
					action: function() { state._confirm("load another dialogue portrait", _open); },
					shortcut: [FlxKey.CONTROL, FlxKey.O],
					icon: "open"
				},
				{
					label: "Save",
					action: function() { _save(false); },
					shortcut: [FlxKey.CONTROL, FlxKey.S],
					icon: "save"
				},
				{
					label: "Save As...",
					action: function() { _save(true); },
					shortcut: [FlxKey.CONTROL, FlxKey.SHIFT, FlxKey.S],
					icon: "save"
				},
				null,
				{
					label: "Help",
					action: function() { new Notify(help); },
					shortcut: [FlxKey.F1]
				},
				{
					label: "Exit",
					action: function() { state._confirm("exit", function() { FlxG.switchState(new EditorMenuState()); }); },
					shortcut: [FlxKey.ESCAPE]
				}
			]
		},
		{
			label: "Edit",
			options: [
				{
					label: "Undo",
					action: undo,
					shortcut: [FlxKey.CONTROL, FlxKey.Z],
					icon: "undo"
				},
				{
					label: "Redo",
					action: redo,
					shortcut: [FlxKey.CONTROL, FlxKey.SHIFT, FlxKey.Z],
					icon: "redo"
				}
			]
		},
		{
			label: "View",
			options: [
				{
					label: "Information Panel",
					condition: function() { return state.members.contains(state.infoBox); },
					action: function() {
						if (state.members.contains(state.infoBox))
							remove(state.infoBox, true);
						else
							insert(state.members.indexOf(topmenu), state.infoBox);
					},
					icon: "bullet"
				},
				{
					label: "Animations Panel",
					condition: function() { return state.members.contains(charAnims); },
					action: function() {
						if (state.members.contains(charAnims))
							remove(charAnims, true);
						else
							insert(state.members.indexOf(topmenu), charAnims);
					},
					icon: "bullet"
				},
				{
					label: "Dialogue Box",
					condition: function() { return box.visible; },
					action: function() { box.visible = !box.visible; },
					icon: "bullet"
				}
			]
		}
	]);
	topmenu.cameras = [state.camHUD];
	add(topmenu);

	dataLog = [Cloner.clone(data)];
}

function update(elapsed)
{
	mousePos.x = FlxG.mouse.x;
	mousePos.y = FlxG.mouse.y;

	if (!state.pauseUndo && !DeepEquals.deepEquals(data, dataLog[state.undoPosition]))
	{
		if (state.undoPosition < dataLog.length - 1)
			dataLog.resize(state.undoPosition + 1);
		dataLog.push(Cloner.clone(data));
		state.unsaved = true;
		state.undoPosition = dataLog.length - 1;
		state.refreshFilename();
	}

	if (FlxG.mouse.justMoved)
	{
		UIControl.cursor = MouseCursor.ARROW;
		if (portrait.pixelsOverlapPoint(mousePos, 128, state.camGame))
			UIControl.cursor = MouseCursor.HAND;
	}

	if (movingCharacter)
	{
		if (movingAnimOffset)
		{
			data.animations[curAnim].offsets[0] -= Std.int(FlxG.mouse.drag.x);
			data.animations[curAnim].offsets[1] -= Std.int(FlxG.mouse.drag.y);
			portrait.addOffsets(data.animations[curAnim].name, [data.animations[curAnim].offsets[0], data.animations[curAnim].offsets[1]]);
			portrait.updateOffsets();
		}
		else
		{
			data.position[0] += FlxG.mouse.drag.x;
			data.position[1] += FlxG.mouse.drag.y;
			portrait.x = data.position[0];
			portrait.y = data.position[1];
		}

		if (Options.mouseJustReleased())
		{
			state.pauseUndo = false;
			movingCharacter = false;
		}
	}
	else
	{
		if (Options.mouseJustPressed())
		{
			if (portrait.pixelsOverlapPoint(mousePos, 128, state.camGame) && !FlxG.mouse.overlaps(tabMenu) && (!state.members.contains(infoBox) || !FlxG.mouse.overlaps(infoBox, state.camHUD)) && (!state.members.contains(charAnims) || !FlxG.mouse.overlaps(charAnims, state.camHUD)))
			{
				movingAnimOffset = FlxG.keys.pressed.SHIFT;
				if (data.animations.length <= 0)
					movingAnimOffset = false;

				movingCharacter = true;
				state.pauseUndo = true;
			}
		}
	}
}

function refresh()
{
	portrait.frames = Paths.sparrow(data.asset);
	prefixArray = Paths.sparrowAnimations(data.asset);
	if (Paths.exists("images/" + data.asset + ".txt"))
		allAnimData = Paths.raw("images/" + data.asset + ".txt");
	else
		allAnimData = Paths.raw("images/" + data.asset + ".xml");
	portrait.x = data.position[0];
	portrait.y = data.position[1];
	portrait.antialiasing = data.antialias;
	portrait.flipX = data.flip;
	portrait.scale.x = data.scale[0];
	portrait.scale.y = data.scale[1];
	portrait.updateHitbox();
	portrait.baseOffset.set(portrait.offset.x, portrait.offset.y);

	for (a in data.animations)
	{
		portrait.addAnim(a.name, a.prefix, a.fps, a.loop, a.indices);
		portrait.addOffsets(a.name, [a.offsets[0], a.offsets[1]]);
	}

	if (curAnim >= 0 && data.animations.length > 0)
		portrait.playAnim(data.animations[curAnim].name);
}

function refreshScale()
{
	portrait.frames = Paths.sparrow(data.asset);
	portrait.scale.x = data.scale[0];
	portrait.scale.y = data.scale[1];
	portrait.updateHitbox();
	portrait.baseOffset.set(portrait.offset.x, portrait.offset.y);

	for (a in data.animations)
	{
		portrait.addAnim(a.name, a.prefix, a.fps, a.loop, a.indices);
		portrait.addOffsets(a.name, [a.offsets[0], a.offsets[1]]);
	}

	if (curAnim >= 0 && data.animations.length > 0)
		portrait.playAnim(data.animations[curAnim].name);
}

function refreshMenus()
{
	var animList = [];
	var animList2 = [""];
	var expressionList = [];

	if (data.expressions.length > 0)
	{
		for (e in data.expressions)
			expressionList.push(e.name);
	}

	if (data.animations.length > 0)
	{
		for (a in data.animations)
		{
			animList.push(a.name);
			animList2.push(a.name);
		}

		animName.text = data.animations[curAnim].name;
		idlePrefix.value = data.animations[curAnim].prefix;
		if (data.animations[curAnim].indices != null)
			animIndices.text = data.animations[curAnim].indices.join(",");
		else
			animIndices.text = "";
	}

	expressionDropdown.valueList = expressionList;
	expressionEnterAnim.valueList = animList2;
	expressionTalkAnim.valueList = animList2;
	expressionIdleAnim.valueList = animList;

	if (expressionIdleAnim.value == "" && expressionIdleAnim.valueList.length > 0)
		expressionIdleAnim.value = expressionIdleAnim.valueList[0];

	if (expressionDropdown.value == "" && expressionDropdown.valueList.length > 0)
	{
		expressionDropdown.value = expressionDropdown.valueList[0];
		expressionDropdown.onChanged();
	}
}

function refreshCharAnimList()
{
	charAnimList = [];
	for (i in 0...data.animations.length)
		charAnimList.push(data.animations[i].name);
}

function refreshCharAnims()
{
	refreshCharAnimList();

	charAnims.items = [];
	for (anim in data.animations)
		charAnims.items.push(anim.name + " (" + Std.string(anim.offsets[0]) + ", " + Std.string(anim.offsets[1]) + ")");

	charAnims.refreshText();
}



function undo()
{
	if (state.undoPosition > 0)
	{
		state.undoPosition--;
		if (!state.unsaved)
		{
			state.unsaved = true;
			state.refreshFilename();
		}
		data = Cloner.clone(dataLog[state.undoPosition]);
		postUndoRedo();
	}
}

function redo()
{
	if (state.undoPosition < dataLog.length - 1)
	{
		state.undoPosition++;
		if (!state.unsaved)
		{
			state.unsaved = true;
			state.refreshFilename();
		}
		data = Cloner.clone(dataLog[state.undoPosition]);
		postUndoRedo();
	}
}

function postUndoRedo()
{
	if (curAnim > data.animations.length - 1)
	{
		curAnim = data.animations.length - 1;
		charAnims.selected = curAnim;
	}
	refresh();
	refreshMenus();
	refreshCharAnims();
}



function _new()
{
	FlxG.switchState(new HscriptEditorState(true, "", ""));
}

function _save(browse)
{
	var saveData = Json.stringify(data, null, "\t");
	if (Options.options.compactJsons)
		saveData = Json.stringify(data);

	if (saveData != null && saveData.length > 0)
	{
		if (browse || state.filename == "")
		{
			var file = new FileBrowser();
			file.saveCallback = state.changeSaveName;
			file.save(data.asset.toLowerCase() + ".json", StringTools.trim(saveData));
		}
		else
		{
			FileBrowser.saveAs(state.filename, StringTools.trim(saveData));
			state.unsaved = false;
			state.refreshFilename();
		}
	}
}

function _open()
{
	var file = new FileBrowser();
	file.loadCallback = function(fullPath) {
		var fileArray = StringTools.replace(fullPath,'\\','/').split('/');
		while (fileArray[0] != "data")
			fileArray.shift();
		fileArray.shift();

		FlxG.switchState(new HscriptEditorState(false, fileArray.join("/").split('.json')[0], fullPath));
	}
	file.load("json", "json");
}

function loadAsset()
{
	var file = new FileBrowser();
	file.loadCallback = function(fullPath) {
		var fileArray = StringTools.replace(fullPath,'\\','/').split('/');
		if (fileArray.contains("images"))
		{
			while (fileArray[0] != "images")
				fileArray.shift();
			fileArray.shift();

			var portraitAsset = fileArray.join("/").split('.png')[0];
			if (!changeAsset(portraitAsset))
				new Notify("The file you have selected can not be found. It is likely in the wrong location.");
		}
		else
			new Notify("The file you have selected is not a portrait asset.");
	}
	file.load("png", "png");
}

function changeAsset(asset)
{
	if (Paths.sparrowExists(asset))
	{
		data.asset = asset;
		refresh();
		idlePrefix.valueList = prefixArray;
		refreshMenus();
		return true;
	}

	return false;
}