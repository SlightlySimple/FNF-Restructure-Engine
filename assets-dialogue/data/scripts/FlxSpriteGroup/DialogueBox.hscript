canFlip = true;
mood = "normal";
textType = "alphabet";
talking = false;
completeCallback = null;

function new(type)
{
	data = Paths.json("dialogue/boxes/" + type);
	if (data.canFlip != null)
		canFlip = data.canFlip;

	this.setPosition(data.position[0], data.position[1]);
	box = CreateSprite(data.asset);
	if (data.scale != null && data.scale.length > 1)
	{
		box.scale.x = data.scale[0];
		box.scale.y = data.scale[1];
		box.updateHitbox();
	}
	if (data.antialias != null)
		box.antialiasing = data.antialias;
	add(box);

	box.baseOffset.set(box.offset.x, box.offset.y);
	for (a in data.animations)
	{
		box.addAnim(a.name, a.prefix, a.fps, a.loop, a.indices);
		box.addOffsets(a.name, [a.offsets[0], a.offsets[1]]);
	}

	moods = new StringMap();

	for (m in data.moods)
		moods[m.name] = m;

	box.animation.finishCallback = function(anim) {
		if (moods[mood].enter != null && anim == moods[mood].enter)
			playIdle();
		else if (moods[mood].open != null && anim == moods[mood].open)
			playIdle();
		else if (moods[mood].talkingToIdle != null && anim == moods[mood].talkingToIdle)
			playIdle();
		else if (moods[mood].idleToTalking != null && anim == moods[mood].idleToTalking)
			playIdle();
	}



	if (data.text.font != null && data.text.font != "")
	{
		diaText = new FlxTypeText(data.text.position[0], data.text.position[1], data.text.width, "", data.text.size);
		diaText.font = Paths.font(data.text.font);
		diaText.color = FlxColor.fromRGB(data.text.color[0], data.text.color[1], data.text.color[2]);
		if (data.text.border != null)
		{
			if (data.text.border.style == "shadow")
				diaText.borderStyle = SHADOW;
			else
				diaText.borderStyle = OUTLINE;
			diaText.borderColor = FlxColor.fromRGB(data.text.border.color[0], data.text.border.color[1], data.text.border.color[2]);
			diaText.borderSize = data.text.border.size;
		}
		textType = "font";
	}
	else
		diaText = new TypedAlphabet(data.text.position[0], data.text.position[1], "", "default", data.text.width, true, data.text.size / 75);
	if (data.antialias != null)
		diaText.antialiasing = data.antialias;
	add(diaText);



	skip = new FlxText(data.skipPosition[0], data.skipPosition[1], 0, "Press BACKSPACE to skip", data.text.size / 2);
	if (data.text.font != null && data.text.font != "")
		skip.font = Paths.font(data.text.font);
	else
		skip.font = "FNF Dialogue";
	skip.color = FlxColor.fromRGB(data.text.color[0], data.text.color[1], data.text.color[2]);
	if (data.text.border != null)
	{
		if (data.text.border.style == "shadow")
			skip.borderStyle = SHADOW;
		else
			skip.borderStyle = OUTLINE;
		skip.borderColor = FlxColor.fromRGB(data.text.border.color[0], data.text.border.color[1], data.text.border.color[2]);
		skip.borderSize = data.text.border.size / 2;
	}
	if (data.antialias != null)
		skip.antialiasing = data.antialias;
	add(skip);
}

function flip()
{
	if (canFlip)
	{
		box.playAnim(data.animations[0].name, true);
		box.flip();
		setMood(mood);
	}
}

function enter()
{
	if (moods[mood].enter != null)
		box.playAnim(moods[mood].enter, true);
	else
		setMood(mood);
}

function setMood(newMood)
{
	mood = newMood;
	if (moods[mood].enter != null && box.animation.curAnim.name == moods[mood].enter)
		return;
	if (moods[mood].idleToTalking != null && box.animation.curAnim.name == moods[mood].idleToTalking)
		return;

	if (moods[mood].open != null)
		box.playAnim(moods[mood].open, true);
	else
		playIdle();
}

function playIdle()
{
	if (talking && moods[mood].talkingIdle != null)
		box.playAnim(moods[mood].talkingIdle);
	else
		box.playAnim(moods[mood].idle);
}

function startText(text, rate, append)
{
	talking = true;
	if (append)
	{
		if (textType == "font")
		{
			diaText.prefix = diaText.text;
			diaText.resetText(text);
			diaText.start(rate, true);
		}
		else
		{
			prevIndex = diaText.text.length;
			diaText.resetText(diaText.text + text);
			diaText.start(rate, true);
			diaText.index = prevIndex;
			for (i in 0...prevIndex)
				diaText.members[i].visible = diaText.members[i].active;
		}
	}
	else
	{
		if (textType == "font")
			diaText.prefix = "";
		diaText.resetText(text);
		diaText.start(rate, true);
	}
	diaText.completeCallback = textFullyShown;
}

function proceed()
{
	if (textType == "alphabet")
	{
		if (!diaText.paused)
		{
			diaText.skip();
			return false;
		}
	}
	else
	{
		if (diaText._length < diaText._finalText.length)
		{
			diaText.skip();
			return false;
		}
	}

	if (moods[mood].idleToTalking != null)
		box.playAnim(moods[mood].idleToTalking, true);
	else
		playIdle();

	return true;
}

function textFullyShown()
{
	talking = false;
	if (moods[mood].talkingToIdle != null)
		box.playAnim(moods[mood].talkingToIdle, true);
	else
		playIdle();

	if (completeCallback != null)
		completeCallback();
}