dialogueSpawned = false;
doingDialogue = false;
myDia = "";

defaultSound = null;
clickSound = "";

curBox = "default";
curMood = "normal";
prevMood = "";

curCharacter = "";
prevCharacter = "";

dialogueList = [];
dialogueProgress = 0;
lineIndex = -1;

right = true;
rate = 0.04;
music = null;
fadeTimes = [0.8, 0.7];
bgAlpha = 0.5;

function new(dialogue)
{
	this.cameras = [game.camOther];

	myDia = dialogue;
	var diaDirectory = "songs/"+PlayState.songId+"/"+dialogue;
	if (!Paths.exists("data/" + diaDirectory + ".txt"))
		diaDirectory = dialogue;
	var allDialogue = Paths.text(diaDirectory);
	dialogueList = Util.splitFile(allDialogue);
	doingDialogue = true;

	bgFade = new FlxSprite(-200, -200).makeGraphic(Std.int(FlxG.width * 1.3), Std.int(FlxG.height * 1.3), FlxColor.WHITE);
	add(bgFade);

	ports = new StringMap();
	portNames = [];
	for (d in dialogueList)
	{
		var diaSplit = d.split("\t");
		if (d.indexOf("\t") == -1 && d.indexOf("::") > -1)
			diaSplit = d.split("::");
		if (diaSplit[0] != "!setting" && !portNames.contains(diaSplit[0]) && diaSplit[0] != "")
			portNames.push(diaSplit[0]);
	}

	for (p in portNames)
	{
		var port = new DialoguePort(p);
		add(port);
		ports[p] = port;
	}

	boxes = new StringMap();
	boxNames = ["default"];
	for (d in dialogueList)
	{
		var diaSplit = d.split("\t");
		if (d.indexOf("\t") == -1 && d.indexOf("::") > -1)
			diaSplit = d.split("::");
		if (diaSplit[0] == "!setting" && diaSplit[1] == "box" && !boxNames.contains(diaSplit[2]))
			boxNames.push(diaSplit[2]);
	}

	for (b in boxNames)
	{
		var newBox = new DialogueBox(b);
		boxes[b] = newBox;
	}

	box = boxes["default"];
	add(box);
	defaultSound = FlxG.sound.load(Paths.sound(box.getVar("data").textSound), 0.6);
	clickSound = box.getVar("data").clickSound;
	box.getVar("diaText").sounds = [defaultSound];
}

function update(elapsed)
{
	if (!dialogueSpawned)
	{
		dialogueSpawned = true;

		box.execFunc("enter");
		continueDialogue();

		bgFade.alpha = 0;
		if (box.getVar("data").steps > 0)
			FlxTween.tween(bgFade, {alpha: bgAlpha}, fadeTimes[0], {ease: Util.pixelEase(box.getVar("data").steps)});
		else
			FlxTween.tween(bgFade, {alpha: bgAlpha}, fadeTimes[0]);
	}

	if (doingDialogue)
	{
		if (FlxG.keys.justPressed.BACKSPACE)
		{
			if (dialogueProgress + 1 < dialogueList.length)
			{
				for (i in dialogueProgress + 1...dialogueList.length)
				{
					game.hscriptExec("onDialogueLine", [myDia, i]);
					game.hscriptExec("onDialogueLineShown", [myDia, i]);
				}
			}
			if (clickSound != "")
				PlaySound(clickSound, 0.8);
			endDialogue();
		}
		else if (FlxG.keys.justPressed.ANY)
		{
			if (clickSound != "")
				PlaySound(clickSound, 0.8);
			if (box.execFuncReturn("proceed"))
			{
				if (dialogueProgress + 1 >= dialogueList.length)
					endDialogue();
				else
				{
					dialogueProgress++;
					continueDialogue();
				}
			}
		}
	}
}

function continueDialogue()
{
	var diaSplit = dialogueList[dialogueProgress].split("\t");
	if (dialogueList[dialogueProgress].indexOf("\t") == -1 && dialogueList[dialogueProgress].indexOf("::") > -1)
		diaSplit = dialogueList[dialogueProgress].split("::");
	curCharacter = diaSplit[0];

	if (curCharacter == "!setting")
	{
		switch (diaSplit[1])
		{
			case "music": playMusic(diaSplit[2], Std.parseFloat(diaSplit[3]), Std.parseFloat(diaSplit[4]));
			case "bgColor": bgFade.color = FlxColor.fromRGB(Std.parseInt(diaSplit[2]), Std.parseInt(diaSplit[3]), Std.parseInt(diaSplit[4]));
			case "bgAlpha": bgAlpha = Std.parseFloat(diaSplit[2]); bgFade.alpha = bgAlpha;
			case "fadeTimes": fadeTimes = [Std.parseFloat(diaSplit[2]), Std.parseFloat(diaSplit[3])];
			case "mood": curMood = diaSplit[2];
			case "flip": box.execFunc("flip"); right = !right;
			case "rate": rate = Std.parseFloat(diaSplit[2]);
			case "box":
				if (diaSplit[2] != curBox)
				{
					curBox = diaSplit[2];
					remove(box, true);
					box = boxes[curBox];
					add(box);
					defaultSound = FlxG.sound.load(Paths.sound(box.getVar("data").textSound), 0.6);
					clickSound = box.getVar("data").clickSound;
					box.getVar("diaText").sounds = [defaultSound];
					box.execFunc("enter");
				}
		}
		dialogueProgress++;
		continueDialogue();
	}
	else
	{
		if (curCharacter != prevCharacter || curMood != prevMood)
		{
			box.execFunc("setMood", [curMood]);
			prevMood = curMood;
		}

		if (curCharacter != prevCharacter)
		{
			if (ports.exists(prevCharacter))
				ports[prevCharacter].execFunc("exit", []);
			if (ports.exists(curCharacter))
			{
				ports[curCharacter].execFunc("setExpression", [diaSplit[1]]);
				ports[curCharacter].execFunc("enter", [right]);
			}

			if (ports.exists(curCharacter) && ports[curCharacter].getVar("sounds").length > 0)
				box.getVar("diaText").sounds = ports[curCharacter].getVar("sounds");
			else
				box.getVar("diaText").sounds = [defaultSound];
		}
		if (ports.exists(curCharacter))
		{
			ports[curCharacter].execFunc("setExpression", [diaSplit[1]]);
			ports[curCharacter].execFunc("playTalk");
		}

		lineIndex++;
		var append = false;
		if (diaSplit.length > 3 && diaSplit[3] == "append")
			append = true;
		box.execFunc("startText", [diaSplit[2], rate, append]);
		game.hscriptExec("onDialogueLine", [myDia, lineIndex]);
		box.setVar("completeCallback", function() {
			if (ports.exists(curCharacter))
				ports[curCharacter].execFunc("playIdle");
			game.hscriptExec("onDialogueLineShown", [myDia, lineIndex]);
		});
		prevCharacter = curCharacter;
	}
}

function endDialogue()
{
	doingDialogue = false;
	box.setVar("talking", true);
	if (ports.exists(curCharacter))
		ports[curCharacter].execFunc("exit", []);

	for (m in [bgFade, box])
	{
		if (box.getVar("data").steps > 0)
			FlxTween.tween(m, {alpha: 0}, fadeTimes[1], {ease: Util.pixelEase(box.getVar("data").steps)});
		else
			FlxTween.tween(m, {alpha: 0}, fadeTimes[1]);
	}

	if (music != null)
		music.fadeOut(0.5, 0, function(twn) { music.stop(); music = null; });

	new FlxTimer().start(fadeTimes[1], function(tmr)
	{
		game.remove(this);
		game.hscriptExec("onDialogueFinished", [myDia]);
		this.kill();
	});
}

function playMusic(track, volume, fadeTime)
{
	if (track == "none")
	{
		if (music != null)
		{
			if (fadeTime > 0)
				music.fadeOut(fadeTime, 0, function(twn) { music.stop(); music = null; });
			else
			{
				music.stop();
				music = null;
			}
		}
	}
	else
	{
		if (music != null)
		{
			music.stop();
			music = null;
		}

		music = new FlxSound().loadEmbedded(Paths.music(track), true, true);
		FlxG.sound.list.add(music);
		if (fadeTime > 0)
			music.volume = 0;
		else
			music.volume = volume;
		music.play();
		if (fadeTime > 0)
			music.fadeIn(fadeTime, 0, volume);
	}
}