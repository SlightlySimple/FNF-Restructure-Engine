import flixel.util.FlxGradient;
import flixel.math.FlxRect;
import flixel.effects.FlxFlicker;
import data.ScoreSystems;

isSubstate = false;

categories = [
	["tally total notes", -120, 125, 0],
	["tally accuracy", -65, 175, 1],
	["tally max combo", -75, 225, 2],
	["tally marvelous", -6, 276, 3],
	["tally sick", -7, 311, 4],
	["tally good", -17, 352, 5],
	["tally bad", 4, 391, 6],
	["tally shit", -7, 438, 7],
	["tally held", 0, 484, 8],
	["tally missed", -39, 515, 9]
];

rankData = new StringMap();
charSprites = [];

rankData["SHIT"] = {
	displayText: "LOSS",
	musicPath: "SHIT",
	musicDelay: 2 / 24,
	charactersDelay: 95 / 24,
	textDelay: 186 / 24,
	highscoreDelay: 207 / 24
}

rankData["GOOD"] = {
	displayText: "GOOD",
	musicPath: "",
	musicDelay: 3 / 24,
	charactersDelay: 95 / 24,
	textDelay: 107 / 24,
	highscoreDelay: 127 / 24
}

rankData["GREAT"] = {
	displayText: "GREAT",
	musicPath: "",
	musicDelay: 5 / 24,
	charactersDelay: 95 / 24,
	textDelay: 109 / 24,
	highscoreDelay: 129 / 24
}

rankData["EXCELLENT"] = {
	displayText: "EXCELLENT",
	musicPath: "EXCELLENT",
	musicDelay: 0,
	charactersDelay: 97 / 24,
	textDelay: 122 / 24,
	highscoreDelay: 140 / 24
}

rankData["PERFECT"] = {
	displayText: "PERFECT",
	musicPath: "PERFECT",
	musicDelay: 95 / 24,
	charactersDelay: 95 / 24,
	textDelay: 129 / 24,
	highscoreDelay: 140 / 24
}

rankData["PERFECT_GOLD"] = rankData["PERFECT"];

movingSongStuff = false;
playbackRateY = 0;

canShowResultsGraph = false;
resultsGraphDown = false;

function create(data)
{
	resultsData = data;
	playbackRate = data.playbackRate;
	add = this.add;
	viewingSong = 0;

	characterData = Paths.json("players/" + PlayState.variant);

	rank = rankData[ResultsState.ranks[data.score.rank]];

    var bg = FlxGradient.createGradientFlxSprite(FlxG.width, FlxG.height, [0xFFFECC5C, 0xFFFDC05C], 90);
    add(bg);

    bgFlash = FlxGradient.createGradientFlxSprite(FlxG.width, FlxG.height, [0xFFFFEB69, 0xFFFFE66A], 90);
    bgFlash.visible = false;
    add(bgFlash);

	rankTextBackGrp = new FlxSpriteGroup();
	add(rankTextBackGrp);

	rankTextVertGrp = new FlxSpriteGroup();
	add(rankTextVertGrp);

	spawnRankText();
	new FlxTimer().start(rank.textDelay, function(tmr) { displayRankText(); });

	spawnCharacters();
	new FlxTimer().start(rank.charactersDelay, function(tmr) {
		timerThenSongName();
		rankSequence();
	});

	var songNameFont = FlxBitmapFont.fromMonospace(Paths.image("ui/results/tardlingSpritesheet"), "AaBbCcDdEeFfGgHhiIJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz:1234567890-.,!()", FlxPoint.get(49, 62));

	playbackRateText = new FlxBitmapText(songNameFont);
	playbackRateText.setPosition(-1000, -1000);
	playbackRateText.text = Lang.get("#results.playbackRate", [Std.string(data.playbackRate)]);
	playbackRateText.letterSpacing = -15;
	playbackRateText.angle = -4.4;
	if (data.playbackRate != 1)
		add(playbackRateText);

	chartSide = new FlxBitmapText(songNameFont);
	chartSide.setPosition(-1000, -1000);
	chartSide.text = Lang.get("#results.chartSide", [Lang.get(data.sideName)]);
	chartSide.letterSpacing = -15;
	chartSide.angle = -4.4;
	if (data.chartSide > 0)
	{
		add(chartSide);
		playbackRateY = 60;
	}

	if (Paths.imageExists("ui/results/difficulties/" + data.difficulty))
		difficulty = CreateSprite("ui/results/difficulties/" + data.difficulty);
	else
	{
		difficulty = new FlxBitmapText(songNameFont);
		difficulty.text = Lang.get("#difficulty." + data.difficulty, null, data.difficulty).toUpperCase();
		difficulty.letterSpacing = -15;
		difficulty.angle = -4.4;
		difficulty.scale.set(1.1, 1.1);
		difficulty.updateHitbox();
	}
	difficulty.setPosition(-1000, -1000);
	add(difficulty);

    clearPercentSmall = new ResultsClearPercentage(-1000, -1000, Math.floor(resultsData.score.clear * 100), true);
	add(clearPercentSmall);

	songName = new FlxBitmapText(songNameFont);
	songName.setPosition(-1000, -1000);
	songName.text = data.title;
	songName.letterSpacing = -15;
	songName.angle = -4.4;
	add(songName);

	var angleRad = songName.angle * Math.PI / 180;
	speedOfTween = new FlxObject(-Math.cos(angleRad), -Math.sin(angleRad));

	resultsGraphGroup = new FlxSpriteGroup(510, -750);
	add(resultsGraphGroup);

	var resultsGraphPath = "ui/results/resultsGraph";
	if (Paths.imageExists(resultsGraphPath + "-" + PlayState.variant))
		resultsGraphPath += "-" + PlayState.variant;
	var resultsGraph = CreateSprite(resultsGraphPath);
	resultsGraphGroup.add(resultsGraph);

	var soundSystem = CreateSprite("ui/results/soundSystem", -15, -180);
	soundSystem.addAnim("idle", "sound system", 24, false);
	soundSystem.visible = false;
	add(soundSystem);

	new FlxTimer().start(0.4, function(tmr) {
		soundSystem.visible = true;
		soundSystem.playAnim("idle");
	});

	var blur = new FlxRuntimeShader(Paths.shader("gaussianBlur"), null);
	blur.data._amount.value = [1];

	graphSongNameBlur = new FlxText(100, 150, 0, data.songNames[0]).setFormat("5by7", 32, FlxColor.fromString(characterData.freeplayStyle.capsuleTextColors[0]));
	if (data.artistNames[0] != "")
		graphSongNameBlur.text = Lang.get("#results.songNameAndArtist", [data.songNames[0], data.artistNames[0]]);
	graphSongNameBlur.shader = blur;
	resultsGraphGroup.add(graphSongNameBlur);

	graphSongName = new FlxText(100, 150, 0, graphSongNameBlur.text).setFormat("5by7", 32, FlxColor.WHITE);
	resultsGraphGroup.add(graphSongName);

	graphSongNameX = graphSongName.x;
	graphSongNameW = 630;
	if (data.songNames.length > 1)
	{
		var graphSongLBlur = new FlxText(100, 150, 0, "<").setFormat("5by7", 32, FlxColor.fromString(characterData.freeplayStyle.capsuleTextColors[0]));
		graphSongLBlur.shader = blur;
		resultsGraphGroup.add(graphSongLBlur);

		var graphSongL = new FlxText(100, 150, 0, "<").setFormat("5by7", 32, FlxColor.WHITE);
		resultsGraphGroup.add(graphSongL);

		var graphSongRBlur = new FlxText(730, 150, 0, ">").setFormat("5by7", 32, FlxColor.fromString(characterData.freeplayStyle.capsuleTextColors[0]));
		graphSongRBlur.x -= graphSongRBlur.width;
		graphSongRBlur.shader = blur;
		resultsGraphGroup.add(graphSongRBlur);

		var graphSongR = new FlxText(graphSongRBlur.x - resultsGraphGroup.x, 150, 0, ">").setFormat("5by7", 32, FlxColor.WHITE);
		resultsGraphGroup.add(graphSongR);

		graphRank = CreateSprite("ui/freeplay/capsule/rankbadges", 675, 147);
		graphRankBlur = CreateSprite("ui/freeplay/capsule/rankbadges", 675, 147);
		graphRankBlur.shader = blur;

		for (r in [graphRank, graphRankBlur])
		{
			r.addAnim("0", 'LOSS rank0', 24, false);
			r.addAnim("1", 'GOOD rank0', 24, false);
			r.addAnim("2", 'GREAT rank0', 24, false);
			r.addAnim("3", 'EXCELLENT rank0', 24, false);
			r.addAnim("4", 'PERFECT rank0', 24, false);
			r.addAnim("5", 'PERFECT rank GOLD', 24, false);
			r.playAnim(Std.string(data.noteGraphData[0].score.rank));
			r.blend = BlendMode.ADD;
			r.scale.set(0.9, 0.9);
			r.updateHitbox();
			resultsGraphGroup.add(r);
		}

		graphSongNameX += 30;
		graphSongNameW -= 60;
		graphSongName.x = graphSongNameX;
		graphSongNameBlur.x = graphSongNameX;
	}

	refreshGraphSongNameMinMax();

	hitGraph = new FlxSprite(90, 230);
	hitGraph.antialiasing = false;
	resultsGraphGroup.add(hitGraph);

	healthGraph = new FlxSprite(90, 460);
	healthGraph.antialiasing = false;
	resultsGraphGroup.add(healthGraph);

	FlxTween.tween(resultsGraphGroup, {y: -550}, 0.4, {ease: FlxEase.quartOut, startDelay: 0.5});

	var blackTopBar = CreateSprite("ui/results/topBarBlack");
	blackTopBar.y = -blackTopBar.height;
	FlxTween.tween(blackTopBar, {y: 0}, 0.4, {ease: FlxEase.quartOut, startDelay: 0.5});
	add(blackTopBar);

	var resultsAnim = CreateSprite("ui/results/results", -200, -10);
	resultsAnim.addAnim("result", "results", 24, false);
	resultsAnim.playAnim("result");
	add(resultsAnim);

	for (c in categories)
	{
		var cat = CreateSprite("ui/results/resultsCategories", c[1], c[2]);
		if (c[0] == "tally shit" && !Options.options.naughtiness)
			cat.addAnim("idle", c[0] + " censor", 24, false);
		else
			cat.addAnim("idle", c[0] + "0", 24, false);
		cat.scale.set(0.7, 0.7);
		cat.updateHitbox();
		add(cat);

		cat.visible = false;
		new FlxTimer().start((21 + c[3]) / 24, function(tmr) {
			cat.visible = true;
			cat.playAnim("idle");
		});
	}

	var scorePopin = CreateSprite("ui/results/scorePopin", -180, 515);
	scorePopin.addAnim("score", "tally score", 24, false);
	scorePopin.visible = false;
	add(scorePopin);

	var highscoreNew = CreateSprite("ui/results/highscoreNew", 44, 557);
	highscoreNew.addAnim("new", "highscoreAnim0", 24, false);
	highscoreNew.updateHitbox();
	highscoreNew.visible = false;
	if (data.score.score > data.oldScore.score)
		add(highscoreNew);

	ratingGrp = [];

	ratingGrp.push([new ResultsNumber(300, 130, 0, FlxColor.WHITE), data.judgements[0] + data.judgements[1] + data.judgements[2] + data.judgements[3] + data.judgements[4]]);
	ratingGrp.push([new ResultsPercentage(240, 180, 0, FlxColor.WHITE), Math.fround(data.accuracy * 100) / 100]);
	ratingGrp.push([new ResultsNumber(300, 230, 0, FlxColor.WHITE), this.nums[1]]);

	ratingGrp.push([new ResultsNumber(190, 275, 0, 0xFF89E5BF), data.judgements[0]]);
	ratingGrp.push([new ResultsNumber(170, 315, 0, 0xFF89E59E), data.judgements[1]]);
	ratingGrp.push([new ResultsNumber(160, 355, 0, 0xFF89C9E5), data.judgements[2]]);
	ratingGrp.push([new ResultsNumber(150, 395, 0, 0xFFE6CF8A), data.judgements[3]]);
	ratingGrp.push([new ResultsNumber(160, 435, 0, 0xFFE68C8A), data.judgements[4]]);
	ratingGrp.push([new ResultsNumber(170, 475, 0, FlxColor.WHITE), this.nums[2]]);
	ratingGrp.push([new ResultsNumber(180, 515, 0, 0xFFC68AE6), data.judgements[5]]);

	var judgementRating = CreateSprite("ui/results/ratings/" + data.rating, 475, 150);
	judgementRating.y -= judgementRating.height / 2;
	judgementRating.visible = false;
	add(judgementRating);

	for (rating in ratingGrp)
	{
		rating[0].visible = false;
		add(rating[0]);
		new FlxTimer().start(1.2 + (ratingGrp.indexOf(rating) * 0.3), function(tmr) {
			rating[0].visible = true;
			FlxTween.tween(rating[0], {number: rating[1]}, 0.5, {ease: FlxEase.quartOut});
			if (ratingGrp.indexOf(rating) == 0)
				new FlxTimer().start(0.5, function(tmr) { judgementRating.visible = true; });
		});
	}

    score = new ResultsScore(35, 305, 10, data.score.score);
	score.visible = false;
	add(score);

	new FlxTimer().start(36 / 24, function(tmr) {
		scorePopin.visible = true;
		scorePopin.playAnim("score");
	});

	new FlxTimer().start(rank.highscoreDelay, function(tmr) {
		highscoreNew.visible = true;
		highscoreNew.playAnim("new", true);
		highscoreNew.animation.finishCallback = function(anim) {
			highscoreNew.animation.play(anim, true, false, 16);
		}
	});

    new FlxTimer().start(37 / 24, function(tmr) {
		score.visible = true;
		score.animateNumbers();
		startRankTallySequence();
    });

	rebuildGraphs();

	if (ResultsState.music != "")
	{
		var musicPath = ResultsState.music;
		if (Paths.musicExists(musicPath + rank.musicPath + "-" + PlayState.variant))
			musicPath += rank.musicPath + "-" + PlayState.variant;
		else if (Paths.musicExists(musicPath + "-" + PlayState.variant))
			musicPath += "-" + PlayState.variant;
		else if (Paths.musicExists(musicPath + rank.musicPath))
			musicPath += rank.musicPath;
		this.menuMusic = new FlxSound().loadEmbedded(Paths.music(musicPath), true);
		FlxG.sound.list.add(this.menuMusic);

		new FlxTimer().start(rank.musicDelay, function(tmr) {
			this.menuMusic.play();
			if (Paths.exists("music/" + musicPath + ".loop"))
				this.menuMusic.loopTime = Std.parseFloat(Paths.raw("music/" + musicPath + ".loop"));
		});
	}
}

function startRankTallySequence()
{
	bgFlash.visible = true;
	FlxTween.tween(bgFlash, {alpha: 0}, 5 / 24);
	var clearPercentFloat = resultsData.score.clear * 100;
	clearPercentTarget = Math.floor(clearPercentFloat);

	clearPercentLerp = Std.int(Math.max(0, clearPercentTarget - 36));

	var clearPercentCounter = new ResultsClearPercentage(FlxG.width / 2 + 190, FlxG.height / 2 - 70, clearPercentLerp);
	FlxTween.tween(clearPercentCounter, {curNumber: clearPercentTarget}, 58 / 24, {
		ease: FlxEase.quartOut,
		onUpdate: function(twn) {
			if (clearPercentLerp != clearPercentCounter.curNumber)
			{
				clearPercentLerp = clearPercentCounter.curNumber;
				PlaySound("ui/scrollMenu");
			}
		},
		onComplete: function(twn) {
			PlaySound("ui/confirmMenu");
			clearPercentCounter.curNumber = clearPercentTarget;

			clearPercentCounter.flashShader.amount = 1;
			new FlxTimer().start(0.4, function(tmr) { clearPercentCounter.flashShader.amount = 0; });

			new FlxTimer().start(0.25, function(tmr) {
				FlxTween.tween(clearPercentCounter, {alpha: 0}, 0.5, {
					startDelay: 0.5,
					ease: FlxEase.quartOut,
					onComplete: function(twn) { this.remove(clearPercentCounter, true); canShowResultsGraph = true; }
				});
			});
		}
	});
	add(clearPercentCounter);
}

function spawnRankText()
{
	rankTextVert = new FlxBackdrop(Paths.image("ui/results/ranks/rankText" + rank.displayText), 1, 1, false, true, 0, 30);
	rankTextVert.x = FlxG.width - 44;
	rankTextVert.y = 100;
	rankTextVert.alpha = 0.001;
	rankTextVertGrp.add(rankTextVert);

	var xx = FlxG.width / 2 - 320;
	var yy = 60;
	var ang = -3.8;
	var graphic = CreateSprite("ui/results/ranks/rankScroll" + rank.displayText);
	xx -= Math.sin((ang + 90) * Math.PI / 180) * (graphic.width + 10);
	yy += Math.cos((ang + 90) * Math.PI / 180) * (graphic.width + 10);

	for (i in 0...12)
	{
		for (j in 0...4)
		{
			var rankTextBack = CreateSprite("ui/results/ranks/rankScroll" + rank.displayText);
			rankTextBack.setPosition(xx + (Math.sin((ang + 90) * Math.PI / 180) * (graphic.width + 10) * j), yy - (Math.cos((ang + 90) * Math.PI / 180) * (graphic.width + 10) * j));
			rankTextBack.angle = ang;
			rankTextBack.alpha = 0.001;
			rankTextBackGrp.add(rankTextBack);
			var vel = (i % 2 == 0 ? -7 : 7);
			rankTextBack.velocity.x = -Math.sin((ang - 90) * Math.PI / 180) * vel;
			rankTextBack.velocity.y = Math.cos((ang - 90) * Math.PI / 180) * vel;
		}

		xx -= Math.sin(ang * Math.PI / 180) * (135 / 2);
		yy += Math.cos(ang * Math.PI / 180) * (135 / 2);
	}
}

function displayRankText()
{
	bgFlash.visible = true;
	FlxTween.tween(bgFlash, {alpha: 0}, 14 / 24);

	if (Options.options.flashingLights)
		FlxFlicker.flicker(rankTextVert, 2 / 24 * 3, 2 / 24, true);

	new FlxTimer().start(30 / 24, function(tmr) { rankTextVert.velocity.y = -80; });

	rankTextVertGrp.forEachAlive(function(txt) { txt.alpha = 1; });
	rankTextBackGrp.forEachAlive(function(txt) { txt.alpha = 1; });
}

function spawnCharacters()
{
	var rankCharacters = [];
	switch (ResultsState.ranks[resultsData.score.rank])
	{
		case "SHIT": rankCharacters = characterData.results.loss;
		case "GOOD": rankCharacters = characterData.results.good;
		case "GREAT": rankCharacters = characterData.results.great;
		case "EXCELLENT": rankCharacters = characterData.results.excellent;
		case "PERFECT": rankCharacters = characterData.results.perfect;
		case "PERFECT_GOLD": rankCharacters = characterData.results.perfectGold;
	}

	rankCharacters.sort(function(a, b) { return a.zIndex - b.zIndex; });

	for (s in rankCharacters)
	{
		switch (s.renderType)
		{
			case "sparrow":
				var spr = CreateSprite("ui/results/ranks/" + PlayState.variant + "/" + s.assetPath, s.offsets[0], s.offsets[1]);
				spr.addAnim("go", "", 24, false);
				if (s.scale != null)
					spr.scale.set(s.scale, s.scale);
				spr.alpha = 0.001;
				add(spr);
				charSprites.push({sprite: spr, type: s.renderType, delay: s.delay, loopFrame: s.loopFrame, loopFrameLabel: s.loopFrameLabel});

			case "animateatlas":
				var spr = new FlxAnimate(s.offsets[0], s.offsets[1], Paths.atlas("ui/results/ranks/" + PlayState.variant + "/" + s.assetPath));
				spr.anim.addByFrameName("go", "", 24);
				if (s.loopFrameLabel != null)
					spr.anim.addByFrameName("loop", s.loopFrameLabel, 24);
				if (s.scale != null)
					spr.scale.set(s.scale, s.scale);
				spr.alpha = 0.001;
				add(spr);
				charSprites.push({sprite: spr, type: s.renderType, delay: s.delay, loopFrame: s.loopFrame, loopFrameLabel: s.loopFrameLabel});
		}
	}
}

function rankSequence()
{
	for (s in charSprites)
	{
		if (s.delay != null)
		{
			new FlxTimer().start(s.delay, function(tmr) {
				rankSequenceAction(s);
			});
		}
		else
			rankSequenceAction(s);
	}
}

function rankSequenceAction(s)
{
	s.sprite.alpha = 1;
	switch (s.type)
	{
		case "sparrow":
			s.sprite.playAnim("go");
			if (s.loopFrame != null)
				s.sprite.animation.finishCallback = function(anim) { s.sprite.animation.play("go", true, false, s.loopFrame); }

		case "animateatlas":
			s.sprite.playAnim("go");
			s.sprite.curAnimX *= s.sprite.scale.x;
			s.sprite.curAnimY *= s.sprite.scale.y;
			if (s.loopFrameLabel != null)
				s.sprite.onComplete = function() { s.sprite.playAnim("loop"); }
			else if (s.loopFrame != null)
				s.sprite.onComplete = function() { s.sprite.isPlaying = true; s.sprite.anim.curFrame = s.loopFrame; }
	}
}

function update(elapsed)
{
	if (!this.transitioning)
	{
		if (Options.keyJustPressed("ui_down") && !resultsGraphDown)
		{
			if (canShowResultsGraph)
			{
				FlxTween.tween(resultsGraphGroup, {y: -25}, 0.4, {ease: FlxEase.quintOut});
				FlxG.sound.play(Paths.sound("ui/scrollMenu"));
				resultsGraphDown = true;
				refreshNumbers();
			}
			else
				FlxG.sound.play(Paths.sound("ui/cancelMenu"));
		}

		if (Options.keyJustPressed("ui_up") && resultsGraphDown)
		{
			FlxTween.tween(resultsGraphGroup, {y: -550}, 0.2, {ease: FlxEase.cubeIn});
			FlxG.sound.play(Paths.sound("ui/scrollMenu"));
			resultsGraphDown = false;
			refreshNumbers();
		}

		if (resultsGraphDown)
		{
			graphSongNameTimer += elapsed;
			if (graphSongNameMinX > graphSongNameMaxX)
			{
				if (graphSongNameTimer <= 0.3)
					graphSongName.x = graphSongNameMinX;
				else if (graphSongNameTimer <= 2.3)
				{
					var tweenVal = (graphSongNameTimer - 0.3) / 2;
					graphSongName.x = graphSongNameMinX + ((graphSongNameMaxX - graphSongNameMinX) * FlxEase.sineInOut(tweenVal));
				}
				else if (graphSongNameTimer <= 2.6)
					graphSongName.x = graphSongNameMaxX;
				else if (graphSongNameTimer <= 4.6)
				{
					var tweenVal = (graphSongNameTimer - 2.6) / 2;
					graphSongName.x = graphSongNameMaxX + ((graphSongNameMinX - graphSongNameMaxX) * FlxEase.sineInOut(tweenVal));
				}
				else
					graphSongNameTimer = 0;

				var rect = new FlxRect(-(graphSongName.x - graphSongNameMinX), 0, graphSongNameW, graphSongName.height);
				graphSongName.clipRect = rect;
				graphSongNameBlur.clipRect = rect;
			}
			graphSongNameBlur.x = graphSongName.x;

			if (resultsData.noteGraphData.length > 1)
			{
				if (Options.keyJustPressed("ui_right"))
					changeSelection(1);

				if (Options.keyJustPressed("ui_left"))
					changeSelection(-1);
			}
		}
	}

	rankTextBackGrp.forEachAlive(function(txt) {
		if (txt.velocity.x > 0)
		{
			if (txt.x > FlxG.width)
			{
				while (txt.x + txt.width > 0)
				{
					txt.x -= Math.sin((txt.angle + 90) * Math.PI / 180) * (txt.width + 10);
					txt.y += Math.cos((txt.angle + 90) * Math.PI / 180) * (txt.width + 10);
				}
			}
		}
		else
		{
			if (txt.x + txt.width < 0)
			{
				while (txt.x < FlxG.width)
				{
					txt.x += Math.sin((txt.angle + 90) * Math.PI / 180) * (txt.width + 10);
					txt.y -= Math.cos((txt.angle + 90) * Math.PI / 180) * (txt.width + 10);
				}
			}
		}
	});

	if (movingSongStuff)
	{
		songName.x += speedOfTween.x;
		songName.y += speedOfTween.y;
		difficulty.x += speedOfTween.x;
		difficulty.y += speedOfTween.y;
		clearPercentSmall.x += speedOfTween.x;
		clearPercentSmall.y += speedOfTween.y;
		chartSide.x += speedOfTween.x;
		chartSide.y += speedOfTween.y;
		playbackRateText.x += speedOfTween.x;
		playbackRateText.y += speedOfTween.y;

		if (songName.x + songName.width < 100)
			timerThenSongName();
	}
}

function timerThenSongName()
{
	movingSongStuff = false;
	difficulty.setPosition(555, -difficulty.height);

	clearPercentSmall.x = (difficulty.x + difficulty.width) + 60;
	clearPercentSmall.y = -clearPercentSmall.height;

	songName.setPosition(clearPercentSmall.x + 94, -songName.height);
	chartSide.setPosition(difficulty.x, -chartSide.height);
	playbackRateText.setPosition(difficulty.x, -playbackRateText.height);

	var diffY = 122;
	var songNameY = 10 * (songName.text.length / 15);
	var chartSideY = 10 * (chartSide.text.length / 15);
	var playbackRateTextY = 10 * (playbackRateText.text.length / 15);

	FlxTween.tween(difficulty, {y: diffY}, 0.5, {ease: FlxEase.expoOut, startDelay: 0.8});
	FlxTween.tween(clearPercentSmall, {y: 122 - 5}, 0.5, {ease: FlxEase.expoOut, startDelay: 0.85});
	FlxTween.tween(songName, {y: diffY - 35 - songNameY}, 0.5, {ease: FlxEase.expoOut, startDelay: 0.9});
	FlxTween.tween(chartSide, {y: diffY + 55 - chartSideY}, 0.5, {ease: FlxEase.expoOut, startDelay: 1});
	FlxTween.tween(playbackRateText, {y: diffY + 55 + playbackRateY - playbackRateTextY}, 0.5, {ease: FlxEase.expoOut, startDelay: 1.1});

	new FlxTimer().start(3, function(tmr) {
		var tempSpeed = FlxPoint.get(speedOfTween.x, speedOfTween.y);
		speedOfTween.setPosition(0, 0);

		FlxTween.tween(speedOfTween, {x: tempSpeed.x, y: tempSpeed.y}, 0.7, {ease: FlxEase.quadIn});
		movingSongStuff = true;
	});
}

function changeSelection(val)
{
	viewingSong = Util.loop(viewingSong + val, 0, resultsData.noteGraphData.length - 1);
	FlxG.sound.play(Paths.sound("ui/scrollMenu"));

	graphSongName.text = resultsData.songNames[viewingSong];
	if (resultsData.artistNames[viewingSong] != "")
		graphSongName.text = Lang.get("#results.songNameAndArtist", [resultsData.songNames[viewingSong], resultsData.artistNames[viewingSong]]);
	graphSongNameBlur.text = graphSongName.text;

	if (graphRank.animation.curAnim.name != Std.string(resultsData.noteGraphData[viewingSong].score.rank))
	{
		graphRank.playAnim(Std.string(resultsData.noteGraphData[viewingSong].score.rank));
		graphRankBlur.playAnim(Std.string(resultsData.noteGraphData[viewingSong].score.rank));
	}
	refreshGraphSongNameMinMax();
	rebuildGraphs();
	refreshNumbers();
}

function refreshGraphSongNameMinMax()
{
	graphSongNameMinX = graphSongNameX;
	graphSongNameMaxX = graphSongNameX;
	graphSongNameTimer = 0;
	if (graphSongName.width > graphSongNameW)
	{
		graphSongNameMaxX = graphSongNameX - (graphSongName.width - graphSongNameW);
		var rect = new FlxRect(-(graphSongNameX - graphSongNameMinX), 0, graphSongNameW, graphSongName.height);
		graphSongName.clipRect = rect;
		graphSongNameBlur.clipRect = rect;
	}
	else
	{
		graphSongName.clipRect = null;
		graphSongNameBlur.clipRect = null;
	}
	graphSongName.x = graphSongNameMinX;
	graphSongNameBlur.x = graphSongNameMinX;
}

function rebuildGraphs()
{
	hitGraph.pixels = new HitGraph(650, 200, resultsData.noteGraphData[viewingSong], playbackRate);
	healthGraph.pixels = new HealthGraph(650, 120, ResultsState.healthData[viewingSong]);
}

function refreshNumbers()
{
	if (!PlayState.inStoryMode) return;

	var scoreValue = resultsData.score.score;
	var nums = [];

	nums.push(resultsData.judgements[0] + resultsData.judgements[1] + resultsData.judgements[2] + resultsData.judgements[3] + resultsData.judgements[4]);
	nums.push(Math.fround(resultsData.accuracy * 100) / 100);
	nums.push(this.nums[1]);

	nums.push(resultsData.judgements[0]);
	nums.push(resultsData.judgements[1]);
	nums.push(resultsData.judgements[2]);
	nums.push(resultsData.judgements[3]);
	nums.push(resultsData.judgements[4]);
	nums.push(this.nums[2]);
	nums.push(resultsData.judgements[5]);

	if (resultsGraphDown)
	{
		nums = [];
		var data = resultsData.noteGraphData[viewingSong];
		scoreValue = data.score.score;

		nums.push(data.judgements[0] + data.judgements[1] + data.judgements[2] + data.judgements[3] + data.judgements[4]);
		nums.push(Math.fround(data.accuracy * 100) / 100);
		nums.push(data.highestCombo);

		nums.push(data.judgements[0]);
		nums.push(data.judgements[1]);
		nums.push(data.judgements[2]);
		nums.push(data.judgements[3]);
		nums.push(data.judgements[4]);
		nums.push(data.sustains);
		nums.push(data.judgements[5]);
	}

	score.tweenScore(scoreValue, 0.25, FlxEase.quartOut);
	var ind = 0;
	for (rating in ratingGrp)
	{
		FlxTween.cancelTweensOf(rating[0]);
		FlxTween.tween(rating[0], {number: nums[ind]}, 0.25, {ease: FlxEase.quartOut});
		ind++;
	}
}