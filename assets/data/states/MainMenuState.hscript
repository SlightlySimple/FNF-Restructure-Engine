import Sys;
import flixel.effects.FlxFlicker;
import menus.options.OptionsMenuState;

function create()
{
	var state = FlxG.state;
	var menuButtonText = state.menuButtonText;

	camFollow = new FlxObject();
	camFollow.screenCenter();
	FlxG.camera.follow(camFollow, null, 0.06);

	var bg = CreateSprite('ui/' + MainMenuState.menuImages[0]);
	bg.color = MainMenuState.menuColors[0];
	bg.scrollFactor.set(0, Math.min(0.18, 0.54 / menuButtonText.length));
	bg.scale.set(1.1, 1.1);
	bg.updateHitbox();
	bg.screenCenter();
	add(bg);

	bgFlicker = CreateSprite('ui/' + MainMenuState.menuImages[1]);
	bgFlicker.color = MainMenuState.menuColors[1];
	bgFlicker.scrollFactor.set(0, Math.min(0.18, 0.54 / menuButtonText.length));
	bgFlicker.scale.set(1.1, 1.1);
	bgFlicker.updateHitbox();
	bgFlicker.screenCenter();
	bgFlicker.visible = false;
	add(bgFlicker);

	menuButtons = new UIMenu();
	menuButtons.onIdle = function(s) { s.playAnim("idle"); s.updateHitbox(); s.screenCenter(X); }
	menuButtons.onHover = function(s) { s.playAnim("selected"); camFollow.setPosition(s.getGraphicMidpoint().x, s.getGraphicMidpoint().y); s.updateHitbox(); s.screenCenter(X); }
	menuButtons.onSelected = function(s) {
		if (Options.options.flashingLights)
			FlxFlicker.flicker(s, 1, 0.06, false, false);
	}
	add(menuButtons);

	var yy = Std.int((FlxG.height / 2) - ((menuButtonText.length / 2) * 160));
	var yScroll = 0.2 * Math.max(0, menuButtonText.length - 4);
	for (i in 0...menuButtonText.length)
	{
		var textButton = CreateSprite("ui/main_menu/" + menuButtonText[i], 0, yy + (i * 160));
		textButton.addAnim("idle", "idle", 24, true);
		textButton.addAnim("selected", "selected", 24, true);
		menuButtons.add(textButton);
	}
	menuButtons.scrollFactor.set(0, yScroll);

	var version = new FlxText(5, FlxG.height - 18, 0, Lang.get("#engineVersion", [Util.version()]), 16);
	version.scrollFactor.set();
	version.font = "VCR OSD Mono";
	version.borderColor = FlxColor.BLACK;
	version.borderStyle = FlxTextBorderStyle.OUTLINE;
	add(version);
}

function onAccept()
{
	if (Options.options.flashingLights)
		FlxFlicker.flicker(bgFlicker, 1.1, 0.15, false);

	menuButtons.select();
}

function changeSelection(change)
{
	menuButtons.selection = MainMenuState.curOption;
}

function proceed()
{
	var state = FlxG.state;

	if (MainMenuState.curOption >= 0 && MainMenuState.curOption < state.menuButtonText.length)
	{
		for (i in 0...menuButtons.members.length)
		{
			menuButtons.members[i].visible = true;
			if (i != MainMenuState.curOption && state.menuButtonText[MainMenuState.curOption] != "freeplay")
				FlxTween.tween(menuButtons.members[i], {alpha: 0}, 0.4, { ease: FlxEase.quadOut });
		}

		switch (state.menuButtonText[MainMenuState.curOption])
		{
			case "story_mode": FlxG.switchState(new StoryMenuState());
			case "freeplay":
				state.persistentUpdate = false;
				state.openSubState(new FreeplayMenuSubState(true));
			case "options": FlxG.switchState(new OptionsMenuState());
			case "credits": FlxG.switchState(new HscriptState("CreditsMenuState"));
			case "quit": Sys.exit(0);
		}
	}
}

function closeSubState()
{
	var state = FlxG.state;

	state.nav.locked = false;
}