function onEvent(event)
{
	if (event.parameters.variable.indexOf(".") > 0)
	{
		var varSplit = event.parameters.variable.split(".");
		var affect = game;

		for (i in 0...varSplit.length - 1)
		{
			if (varSplit[i].indexOf("[") > -1)
			{
				affect = Reflect.getProperty(affect, varSplit[i].split("[")[0]);
				affect = affect[analyzeArrayValue(varSplit[i].split("[")[1].split("]")[0])];
			}
			else
				affect = Reflect.getProperty(affect, varSplit[i]);
		}

		var prev = Reflect.getProperty(affect, varSplit[varSplit.length - 1]);
		switch (event.parameters.operation)
		{
			case "add": Reflect.setProperty(affect, varSplit[varSplit.length - 1], prev + analyzeValue(event.parameters.value));
			case "multiply": Reflect.setProperty(affect, varSplit[varSplit.length - 1], prev * analyzeValue(event.parameters.value));
			case "divide": Reflect.setProperty(affect, varSplit[varSplit.length - 1], prev / analyzeValue(event.parameters.value));
			default: Reflect.setProperty(affect, varSplit[varSplit.length - 1], analyzeValue(event.parameters.value));
		}
	}
	else
	{
		var prev = Reflect.getProperty(game, event.parameters.variable);
		switch (event.parameters.operation)
		{
			case "add": Reflect.setProperty(game, event.parameters.variable, prev + analyzeValue(event.parameters.value));
			case "multiply": Reflect.setProperty(game, event.parameters.variable, prev * analyzeValue(event.parameters.value));
			case "divide": Reflect.setProperty(game, event.parameters.variable, prev / analyzeValue(event.parameters.value));
			default: Reflect.setProperty(game, event.parameters.variable, analyzeValue(event.parameters.value));
		}
	}
}

function analyzeValue(val)
{
	if (Std.parseFloat(val) != null)
		return Std.parseFloat(val);

	if (val == "true")
		return true;

	if (val == "false")
		return false;

	return val;
}

function analyzeArrayValue(val)
{
	if (Std.parseInt(val) != null)
		return Std.parseInt(val);

	if (StringTools.startsWith(val, "\"") && StringTools.endsWith(val, "\""))
		return val.substr(1, val.length - 2);

	return val;
}