function create()
{
	allowedSlots = [];
	for (c in 0...game.allCharacters.length)
	{
		if (FreeplaySandbox.character(c) == "")
			allowedSlots.push(c);
	}

	var chars = [];
	characterIds = [];

	for (e in game.songData.events)
	{
		if (e.type == "characterSwitch" && !chars.contains(e.parameters.character) && allowedSlots.contains(getSlot(e.parameters.id.toLowerCase())))
			chars.push(e.parameters.character);
	}

	for (c in chars)
	{
		if (Paths.jsonExists("characters/" + c))
		{
			if (!Character.parsedCharacters.exists(c))
				Character.parsedCharacters[c] = Character.parseCharacter(c);
			var curC = Character.parsedCharacters[c];
			var asset:String = curC.asset;
			if (Paths.imageExists(asset))
				Paths.cacheGraphic(asset);

			var cIcon = curC.icon;
			if (cIcon == null || cIcon == "")
			{
				cIcon = c;
				if (!Paths.iconExists(cIcon, false) && Paths.iconExists(cIcon.split("-")[0], false))
					cIcon = cIcon.split("-")[0];
			}

			if (Paths.iconExists(cIcon, false))
				Paths.cacheGraphicDirect(Paths.icon(cIcon));

			characterIds.push(c);
		}
	}
}

function getSlot(str)
{
	if (StringTools.startsWith(str, "player") && Std.parseInt(str.substr("player".length)) - 1 < game.allCharacters.length)
		return Std.parseInt(str.substr("player".length)) - 1;
	if (str == "gf")
		return 2;

	return 0;
}

function onEvent(event)
{
	var slot = getSlot(event.parameters.id.toLowerCase());
	if (allowedSlots.contains(slot) && characterIds.contains(event.parameters.character))
	{
		var characterScript = "player" + Std.string(slot + 1);
		if (slot == 2)
			characterScript = "gf";
		game.hscriptIdExec(characterScript, "destroy", []);
		doSwitch(game.allCharacters[slot], event.parameters.character);
		game.hscriptAdd(characterScript, "data/" + game.allCharacters[slot].characterData.script, true, game.allCharacters[slot]);
		game.hscriptIdExec(characterScript, "create", []);
	}
}

function doSwitch(character, newChar)
{
	if (character.characterData.asset == "")
		character.changeCharacter(newChar);
	else
	{
		var prevAnim = character.curAnimName;
		var prevFrame = character.curAnimFrame;
		character.changeCharacter(newChar);
		if (character.animData.exists(prevAnim))
		{
			character.playAnim(prevAnim, true, false, false);
			if (character.myCharType == "atlas")
				character.atlas.anim.curFrame = prevFrame;
			else
				character.animation.curAnim.curFrame = prevFrame;
		}
	}

	if (Options.options.healthBarCharacterColor && game.iconCharacters.contains(character))
	{
		if (game.iconCharacters[0] == character)
			game.healthBar.emptyColor = Util.colorFromArray(game.iconCharacters[0].characterData.healthbarColor);
		else if (game.iconCharacters[1] == character)
			game.healthBar.fillColor = Util.colorFromArray(game.iconCharacters[1].characterData.healthbarColor);
		game.healthBar.recreateFilledBar();
	}
}