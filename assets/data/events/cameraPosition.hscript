function create()
{
	for (e in game.songData.events)
	{
		if (e.type == "cameraPosition" && e.parameters.init)
			eventGo(e);
	}
}

function onEvent(event)
{
	if (!event.parameters.init)
		eventGo(event);
}

function eventGo(event)
{
	FlxTween.cancelTweensOf(game.camFollow);
	FlxTween.cancelTweensOf(game.camFollowPos);

	if (event.parameters.allow)
	{
		game.overrideCamFocus = true;
		var camX = event.parameters.x;
		var camY = event.parameters.y;
		if (event.parameters.mode.toLowerCase() != "absolute")
		{
			var slot = getSlot(event.parameters.mode.toLowerCase());
			var char = game.allCharacters[slot];
			if (event.parameters.cameraPos)
			{
				camX += char.cameraX;
				camY += char.cameraY;
			}
			else
			{
				camX += char.getMidpoint().x;
				camY += char.getMidpoint().y;
			}
		}

		switch (event.parameters.movement.toLowerCase())
		{
			case "tween":
				FlxTween.tween(game.camFollow, {x: camX, y: camY}, event.parameters.time, {ease: Reflect.field(FlxEase, event.parameters.ease)});
				FlxTween.tween(game.camFollowPos, {x: camX, y: camY}, event.parameters.time, {ease: Reflect.field(FlxEase, event.parameters.ease)});

			case "instant":
				game.camFollow.x = camX;
				game.camFollow.y = camY;
				game.snapCamera();

			default:
				game.camFollow.x = camX;
				game.camFollow.y = camY;
		}
	}
	else
		game.overrideCamFocus = false;
}

function getSlot(str)
{
	if (StringTools.startsWith(str, "player") && Std.parseInt(str.substr("player".length)) - 1 < game.allCharacters.length)
		return Std.parseInt(str.substr("player".length)) - 1;
	if (str == "gf")
		return 2;

	return 0;
}